# 1 "iec_std_lib.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "iec_std_lib.h"
# 33 "iec_std_lib.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 25 "/usr/include/limits.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 374 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 385 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 386 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 375 "/usr/include/features.h" 2 3 4
# 398 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 399 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/limits.h" 2 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 2 3 4
# 34 "iec_std_lib.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/float.h" 1 3 4
# 35 "iec_std_lib.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 33 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 46 "/usr/include/math.h" 2 3 4
# 69 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));







extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));






extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));






extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 70 "/usr/include/math.h" 2 3 4
# 88 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));







extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));






extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));






extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 89 "/usr/include/math.h" 2 3 4
# 132 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

# 86 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));







extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 126 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));






extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




# 371 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 133 "/usr/include/math.h" 2 3 4
# 148 "/usr/include/math.h" 3 4
extern int signgam;
# 189 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 301 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 326 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 488 "/usr/include/math.h" 3 4

# 36 "iec_std_lib.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 2 3 4
# 37 "iec_std_lib.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 26 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/ctype.h" 2 3 4


# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 38 "iec_std_lib.h" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 302 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 390 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 873 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 913 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 943 "/usr/include/stdio.h" 3 4

# 40 "iec_std_lib.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 324 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 200 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 124 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 211 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 513 "/usr/include/stdlib.h" 3 4


extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 530 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));













extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 712 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 752 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 775 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 812 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 899 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 951 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 956 "/usr/include/stdlib.h" 2 3 4
# 968 "/usr/include/stdlib.h" 3 4

# 41 "iec_std_lib.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 44 "/usr/include/string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 96 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 127 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 166 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "/usr/include/string.h" 3 4

# 236 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 263 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 282 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 315 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 342 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 397 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 427 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 445 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 489 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 517 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 534 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 557 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 644 "/usr/include/string.h" 3 4

# 42 "iec_std_lib.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 1 3 4
# 43 "iec_std_lib.h" 2
# 55 "iec_std_lib.h"
# 1 "iec_types_all.h" 1
# 63 "iec_types_all.h"
# 1 "iec_types.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 5 "iec_types.h" 2







typedef uint8_t IEC_BOOL;

typedef int8_t IEC_SINT;
typedef int16_t IEC_INT;
typedef int32_t IEC_DINT;
typedef int64_t IEC_LINT;

typedef uint8_t IEC_USINT;
typedef uint16_t IEC_UINT;
typedef uint32_t IEC_UDINT;
typedef uint64_t IEC_ULINT;

typedef uint8_t IEC_BYTE;
typedef uint16_t IEC_WORD;
typedef uint32_t IEC_DWORD;
typedef uint64_t IEC_LWORD;

typedef float IEC_REAL;
typedef double IEC_LREAL;






typedef struct {
    long int tv_sec;
    long int tv_nsec;
} IEC_TIMESPEC;

typedef IEC_TIMESPEC IEC_TIME;
typedef IEC_TIMESPEC IEC_DATE;
typedef IEC_TIMESPEC IEC_DT;
typedef IEC_TIMESPEC IEC_TOD;
# 77 "iec_types.h"
typedef int8_t __strlen_t;
typedef struct {
    __strlen_t len;
    uint8_t body[126];
} IEC_STRING;
# 64 "iec_types_all.h" 2
# 133 "iec_types_all.h"
 typedef IEC_REAL REAL;typedef struct { IEC_REAL value; IEC_BYTE flags;} __IEC_REAL_t;typedef struct { IEC_REAL *value; IEC_BYTE flags; IEC_REAL fvalue;} __IEC_REAL_p; typedef IEC_LREAL LREAL;typedef struct { IEC_LREAL value; IEC_BYTE flags;} __IEC_LREAL_t;typedef struct { IEC_LREAL *value; IEC_BYTE flags; IEC_LREAL fvalue;} __IEC_LREAL_p; typedef IEC_SINT SINT;typedef struct { IEC_SINT value; IEC_BYTE flags;} __IEC_SINT_t;typedef struct { IEC_SINT *value; IEC_BYTE flags; IEC_SINT fvalue;} __IEC_SINT_p; typedef IEC_INT INT;typedef struct { IEC_INT value; IEC_BYTE flags;} __IEC_INT_t;typedef struct { IEC_INT *value; IEC_BYTE flags; IEC_INT fvalue;} __IEC_INT_p; typedef IEC_DINT DINT;typedef struct { IEC_DINT value; IEC_BYTE flags;} __IEC_DINT_t;typedef struct { IEC_DINT *value; IEC_BYTE flags; IEC_DINT fvalue;} __IEC_DINT_p; typedef IEC_LINT LINT;typedef struct { IEC_LINT value; IEC_BYTE flags;} __IEC_LINT_t;typedef struct { IEC_LINT *value; IEC_BYTE flags; IEC_LINT fvalue;} __IEC_LINT_p; typedef IEC_USINT USINT;typedef struct { IEC_USINT value; IEC_BYTE flags;} __IEC_USINT_t;typedef struct { IEC_USINT *value; IEC_BYTE flags; IEC_USINT fvalue;} __IEC_USINT_p; typedef IEC_UINT UINT;typedef struct { IEC_UINT value; IEC_BYTE flags;} __IEC_UINT_t;typedef struct { IEC_UINT *value; IEC_BYTE flags; IEC_UINT fvalue;} __IEC_UINT_p; typedef IEC_UDINT UDINT;typedef struct { IEC_UDINT value; IEC_BYTE flags;} __IEC_UDINT_t;typedef struct { IEC_UDINT *value; IEC_BYTE flags; IEC_UDINT fvalue;} __IEC_UDINT_p; typedef IEC_ULINT ULINT;typedef struct { IEC_ULINT value; IEC_BYTE flags;} __IEC_ULINT_t;typedef struct { IEC_ULINT *value; IEC_BYTE flags; IEC_ULINT fvalue;} __IEC_ULINT_p; typedef IEC_TIME TIME;typedef struct { IEC_TIME value; IEC_BYTE flags;} __IEC_TIME_t;typedef struct { IEC_TIME *value; IEC_BYTE flags; IEC_TIME fvalue;} __IEC_TIME_p; typedef IEC_BYTE BYTE;typedef struct { IEC_BYTE value; IEC_BYTE flags;} __IEC_BYTE_t;typedef struct { IEC_BYTE *value; IEC_BYTE flags; IEC_BYTE fvalue;} __IEC_BYTE_p; typedef IEC_WORD WORD;typedef struct { IEC_WORD value; IEC_BYTE flags;} __IEC_WORD_t;typedef struct { IEC_WORD *value; IEC_BYTE flags; IEC_WORD fvalue;} __IEC_WORD_p; typedef IEC_DWORD DWORD;typedef struct { IEC_DWORD value; IEC_BYTE flags;} __IEC_DWORD_t;typedef struct { IEC_DWORD *value; IEC_BYTE flags; IEC_DWORD fvalue;} __IEC_DWORD_p; typedef IEC_LWORD LWORD;typedef struct { IEC_LWORD value; IEC_BYTE flags;} __IEC_LWORD_t;typedef struct { IEC_LWORD *value; IEC_BYTE flags; IEC_LWORD fvalue;} __IEC_LWORD_p; typedef IEC_BOOL BOOL;typedef struct { IEC_BOOL value; IEC_BYTE flags;} __IEC_BOOL_t;typedef struct { IEC_BOOL *value; IEC_BYTE flags; IEC_BOOL fvalue;} __IEC_BOOL_p; typedef IEC_STRING STRING;typedef struct { IEC_STRING value; IEC_BYTE flags;} __IEC_STRING_t;typedef struct { IEC_STRING *value; IEC_BYTE flags; IEC_STRING fvalue;} __IEC_STRING_p; typedef IEC_DATE DATE;typedef struct { IEC_DATE value; IEC_BYTE flags;} __IEC_DATE_t;typedef struct { IEC_DATE *value; IEC_BYTE flags; IEC_DATE fvalue;} __IEC_DATE_p; typedef IEC_TOD TOD;typedef struct { IEC_TOD value; IEC_BYTE flags;} __IEC_TOD_t;typedef struct { IEC_TOD *value; IEC_BYTE flags; IEC_TOD fvalue;} __IEC_TOD_p; typedef IEC_DT DT;typedef struct { IEC_DT value; IEC_BYTE flags;} __IEC_DT_t;typedef struct { IEC_DT *value; IEC_BYTE flags; IEC_DT fvalue;} __IEC_DT_p;

typedef struct {
  __IEC_BOOL_t X;
  BOOL prev_state;
  __IEC_TIME_t T;
} STEP;


typedef struct {
  BOOL stored;
  __IEC_BOOL_t state;
  BOOL set;
  BOOL reset;
  TIME set_remaining_time;
  TIME reset_remaining_time;
} ACTION;
# 158 "iec_types_all.h"
typedef enum{
  REAL_ENUM, LREAL_ENUM, SINT_ENUM, INT_ENUM, DINT_ENUM, LINT_ENUM, USINT_ENUM, UINT_ENUM, UDINT_ENUM, ULINT_ENUM, TIME_ENUM, BYTE_ENUM, WORD_ENUM, DWORD_ENUM, LWORD_ENUM, BOOL_ENUM, STRING_ENUM, DATE_ENUM, TOD_ENUM, DT_ENUM,
  REAL_P_ENUM, LREAL_P_ENUM, SINT_P_ENUM, INT_P_ENUM, DINT_P_ENUM, LINT_P_ENUM, USINT_P_ENUM, UINT_P_ENUM, UDINT_P_ENUM, ULINT_P_ENUM, TIME_P_ENUM, BYTE_P_ENUM, WORD_P_ENUM, DWORD_P_ENUM, LWORD_P_ENUM, BOOL_P_ENUM, STRING_P_ENUM, DATE_P_ENUM, TOD_P_ENUM, DT_P_ENUM,
  REAL_O_ENUM, LREAL_O_ENUM, SINT_O_ENUM, INT_O_ENUM, DINT_O_ENUM, LINT_O_ENUM, USINT_O_ENUM, UINT_O_ENUM, UDINT_O_ENUM, ULINT_O_ENUM, TIME_O_ENUM, BYTE_O_ENUM, WORD_O_ENUM, DWORD_O_ENUM, LWORD_O_ENUM, BOOL_O_ENUM, STRING_O_ENUM, DATE_O_ENUM, TOD_O_ENUM, DT_O_ENUM,

  UNKNOWN_ENUM
} __IEC_types_enum;







static inline USINT __get_type_enum_size(__IEC_types_enum t){
 switch(t){
  case REAL_ENUM: case REAL_O_ENUM: case REAL_P_ENUM: return sizeof(REAL); case LREAL_ENUM: case LREAL_O_ENUM: case LREAL_P_ENUM: return sizeof(LREAL); case SINT_ENUM: case SINT_O_ENUM: case SINT_P_ENUM: return sizeof(SINT); case INT_ENUM: case INT_O_ENUM: case INT_P_ENUM: return sizeof(INT); case DINT_ENUM: case DINT_O_ENUM: case DINT_P_ENUM: return sizeof(DINT); case LINT_ENUM: case LINT_O_ENUM: case LINT_P_ENUM: return sizeof(LINT); case USINT_ENUM: case USINT_O_ENUM: case USINT_P_ENUM: return sizeof(USINT); case UINT_ENUM: case UINT_O_ENUM: case UINT_P_ENUM: return sizeof(UINT); case UDINT_ENUM: case UDINT_O_ENUM: case UDINT_P_ENUM: return sizeof(UDINT); case ULINT_ENUM: case ULINT_O_ENUM: case ULINT_P_ENUM: return sizeof(ULINT); case TIME_ENUM: case TIME_O_ENUM: case TIME_P_ENUM: return sizeof(TIME); case BYTE_ENUM: case BYTE_O_ENUM: case BYTE_P_ENUM: return sizeof(BYTE); case WORD_ENUM: case WORD_O_ENUM: case WORD_P_ENUM: return sizeof(WORD); case DWORD_ENUM: case DWORD_O_ENUM: case DWORD_P_ENUM: return sizeof(DWORD); case LWORD_ENUM: case LWORD_O_ENUM: case LWORD_P_ENUM: return sizeof(LWORD); case BOOL_ENUM: case BOOL_O_ENUM: case BOOL_P_ENUM: return sizeof(BOOL); case STRING_ENUM: case STRING_O_ENUM: case STRING_P_ENUM: return sizeof(STRING); case DATE_ENUM: case DATE_O_ENUM: case DATE_P_ENUM: return sizeof(DATE); case TOD_ENUM: case TOD_O_ENUM: case TOD_P_ENUM: return sizeof(TOD); case DT_ENUM: case DT_O_ENUM: case DT_P_ENUM: return sizeof(DT);


  default:
   return 0;
 }
 return 0;
}
# 56 "iec_std_lib.h" 2

extern TIME __CURRENT_TIME;
extern BOOL __DEBUG;
# 114 "iec_std_lib.h"
typedef union __IL_DEFVAR_T {
    BOOL BOOLvar;

    SINT SINTvar;
    INT INTvar;
    DINT DINTvar;
    LINT LINTvar;

    USINT USINTvar;
    UINT UINTvar;
    UDINT UDINTvar;
    ULINT ULINTvar;

    BYTE BYTEvar;
    WORD WORDvar;
    DWORD DWORDvar;
    LWORD LWORDvar;

    REAL REALvar;
    LREAL LREALvar;

    TIME TIMEvar;
    TOD TODvar;
    DT DTvar;
    DATE DATEvar;
} __IL_DEFVAR_T;
# 159 "iec_std_lib.h"
static inline void __iec_error(void) {

  fprintf(stderr, "IEC 61131-3 runtime error.\n");

}





static inline void __normalize_timespec (IEC_TIMESPEC *ts) {
  if( ts->tv_nsec < -1000000000 || (( ts->tv_sec > 0 ) && ( ts->tv_nsec < 0 ))){
    ts->tv_sec--;
    ts->tv_nsec += 1000000000;
  }
  if( ts->tv_nsec > 1000000000 || (( ts->tv_sec < 0 ) && ( ts->tv_nsec > 0 ))){
    ts->tv_sec++;
    ts->tv_nsec -= 1000000000;
  }
}
# 267 "iec_std_lib.h"
static const unsigned short int __mon_yday[2][13] =
{

  { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365},

  { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366}
};

typedef struct {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_day;
 int tm_mon;
 int tm_year;
} tm;

static inline tm convert_seconds_to_date_and_time(long int seconds) {
  tm dt;
  long int days, rem;
  days = seconds / (24 * (60 * 60));
  rem = seconds % (24 * (60 * 60));
  if (rem < 0) {
   rem += (24 * (60 * 60));
   days--;
  }


  dt.tm_hour = rem / (60 * 60);
  rem %= (60 * 60);
  dt.tm_min = rem / 60;
  dt.tm_sec = rem % 60;


  dt.tm_year = 1970;
  while (days >= (rem = ((dt.tm_year) % 4 == 0 && ((dt.tm_year) % 100 != 0 || (dt.tm_year) % 400 == 0)) ? 366 : 365)) {
   dt.tm_year++;
   days -= rem;
  }
  while (days < 0) {
   dt.tm_year--;
   days += ((dt.tm_year) % 4 == 0 && ((dt.tm_year) % 100 != 0 || (dt.tm_year) % 400 == 0)) ? 366 : 365;
  }
  dt.tm_mon = 1;
  while (days > __mon_yday[((dt.tm_year) % 4 == 0 && ((dt.tm_year) % 100 != 0 || (dt.tm_year) % 400 == 0))][dt.tm_mon]) {
   dt.tm_mon += 1;
  }
  dt.tm_day = days - __mon_yday[((dt.tm_year) % 4 == 0 && ((dt.tm_year) % 100 != 0 || (dt.tm_year) % 400 == 0))][dt.tm_mon - 1] + 1;

  return dt;
}

static inline IEC_TIMESPEC __date_to_timespec(int day, int month, int year) {
  IEC_TIMESPEC ts;
  int a4, b4, a100, b100, a400, b400;
  int yday;
  int intervening_leap_days;

  if (month < 1 || month > 12)
  __iec_error();

  yday = __mon_yday[((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))][month - 1] + day;

  if (yday > __mon_yday[((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))][month])
   __iec_error();

  a4 = (year >> 2) - ! (year & 3);
  b4 = (1970 >> 2) - ! (1970 & 3);
  a100 = a4 / 25 - (a4 % 25 < 0);
  b100 = b4 / 25 - (b4 % 25 < 0);
  a400 = a100 >> 2;
  b400 = b100 >> 2;
  intervening_leap_days = (a4 - b4) - (a100 - b100) + (a400 - b400);

  ts.tv_sec = ((year - 1970) * 365 + intervening_leap_days + yday - 1) * 24 * 60 * 60;
  ts.tv_nsec = 0;

  return ts;
}

static inline IEC_TIMESPEC __dt_to_timespec(double seconds, double minutes, double hours, int day, int month, int year) {
  IEC_TIMESPEC ts_date = __date_to_timespec(day, month, year);
  IEC_TIMESPEC ts = ((IEC_TIMESPEC){ ((long int) ((((long double)hours)*60 + (long double)minutes)*60 + (long double)seconds)), ((long int)(( ((long double)((((long double)hours)*60 + (long double)minutes)*60 + (long double)seconds)) - ((long int) ((((long double)hours)*60 + (long double)minutes)*60 + (long double)seconds)) )*1e9)) });

  ts.tv_sec += ts_date.tv_sec;

  return ts;
}







static inline TIME __time_add(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec + IN2.tv_sec,
             IN1.tv_nsec + IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_sub(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec - IN2.tv_sec,
             IN1.tv_nsec - IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_mul(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec * IN2;
  time_t s = (time_t)s_f;
  div_t ns = div((int)((LREAL)IN1.tv_nsec * IN2), 1000000000);
  TIME res = {(long)s + ns.quot,
        (long)ns.rem + (s_f - s) * 1000000000 };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_div(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec / IN2;
  time_t s = (time_t)s_f;
  TIME res = {(long)s,
              (long)(IN1.tv_nsec / IN2 + (s_f - s) * 1000000000) };
  __normalize_timespec(&res);
  return res;
}
# 399 "iec_std_lib.h"
static inline LINT __real_round(LREAL IN) {
 return fmod(IN, 1) == 0 ? ((LINT)IN / 2) * 2 : (LINT)IN;
}
static inline LINT __preal_to_sint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : __real_round(IN - 0.5);
}
static inline LINT __preal_to_uint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : 0;
}
static inline LINT __real_to_sint(LREAL IN) {return (LINT)__preal_to_sint(IN);}
static inline LWORD __real_to_bit(LREAL IN) {return (LWORD)__preal_to_uint(IN);}
static inline ULINT __real_to_uint(LREAL IN) {return (ULINT)__preal_to_uint(IN);}




static inline STRING __bool_to_string(BOOL IN) {
    if(IN) return (STRING){4, "TRUE"};
    return (STRING){5,"FALSE"};
}
static inline STRING __bit_to_string(LWORD IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = snprintf((char*)res.body, 126, "16#%llx",(long long unsigned int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __real_to_string(LREAL IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = snprintf((char*)res.body, 126, "%.10g", IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __sint_to_string(LINT IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = snprintf((char*)res.body, 126, "%lld", (long long int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __uint_to_string(ULINT IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = snprintf((char*)res.body, 126, "%llu", (long long unsigned int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}



static inline BOOL __string_to_bool(STRING IN) {
    int i;
    if (IN.len == 1) return !memcmp(&IN.body,"1", IN.len);
    for (i = 0; i < IN.len; i++) IN.body[i] = toupper(IN.body[i]);
    return IN.len == 4 ? !memcmp(&IN.body,"TRUE", IN.len) : 0;
}

static inline LINT __pstring_to_sint(STRING* IN) {
    LINT res = 0;
    __strlen_t l;
    unsigned int shift = 0;

    if(IN->body[0]=='2' && IN->body[1]=='#'){

        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '1'){
                res |= ( c - '0') << shift;
                shift += 1;
            }
        }
    }else if(IN->body[0]=='8' && IN->body[1]=='#'){

        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '7'){
                res |= ( c - '0') << shift;
                shift += 3;
            }
        }
    }else if(IN->body[0]=='1' && IN->body[1]=='6' && IN->body[2]=='#'){

        for(l = IN->len - 1; l >= 3 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res |= (LWORD)( c - '0') << shift;
                shift += 4;
            }else if( c >= 'a' && c <= 'f'){
                res |= (LWORD)( c - 'a' + 10 ) << shift;
                shift += 4;
            }else if( c >= 'A' && c <= 'F'){
                res |= (LWORD)( c - 'A' + 10 ) << shift;
                shift += 4;
            }
        }
    }else{

        LINT fac = IN->body[0] == '-' ? -1 : 1;
        for(l = IN->len - 1; l >= 0 && shift < 20; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res += ( c - '0') * fac;
                fac *= 10;
                shift += 1;
            }else if( c >= '.' ){
                res = 0;
                fac = IN->body[0] == '-' ? -1 : 1;
                shift = 0;
            }
        }
    }
    return res;
}

static inline LINT __string_to_sint(STRING IN) {return (LINT)__pstring_to_sint(&IN);}
static inline LWORD __string_to_bit (STRING IN) {return (LWORD)__pstring_to_sint(&IN);}
static inline ULINT __string_to_uint(STRING IN) {return (ULINT)__pstring_to_sint(&IN);}
static inline LREAL __string_to_real(STRING IN) {
    __strlen_t l;
    l = IN.len;

    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        return atof((const char *)&IN.body);
    }else{
        return (LREAL)__pstring_to_sint(&IN);
    }
}




static inline TIME __int_to_time(LINT IN) {return (TIME){IN, 0};}
static inline TIME __real_to_time(LREAL IN) {return (TIME){IN, (IN - (LINT)IN) * 1000000000};}
static inline TIME __string_to_time(STRING IN){
    __strlen_t l;
# 562 "iec_std_lib.h"
    l = IN.len;
    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        LREAL IN_val = atof((const char *)&IN.body);
        return (TIME){(long)IN_val, (long)(IN_val - (LINT)IN_val)*1000000000};
    }else{
        return (TIME){(long)__pstring_to_sint(&IN), 0};
    }
}




static inline LREAL __time_to_real(TIME IN){
    return (LREAL)IN.tv_sec + ((LREAL)IN.tv_nsec/1000000000);
}
static inline LINT __time_to_int(TIME IN) {return IN.tv_sec;}
static inline STRING __time_to_string(TIME IN){
    STRING res;
    div_t days;

    res = (STRING){0,""};
    days = div(IN.tv_sec, (24 * (60 * 60)));
    if(!days.rem && IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126, "T#%dd", days.quot);
    }else{
        div_t hours = div(days.rem, (60 * 60));
        if(!hours.rem && IN.tv_nsec == 0){
            res.len = snprintf((char*)&res.body, 126, "T#%dd%dh", days.quot, hours.quot);
        }else{
            div_t minuts = div(hours.rem, 60);
            if(!minuts.rem && IN.tv_nsec == 0){
                res.len = snprintf((char*)&res.body, 126, "T#%dd%dh%dm", days.quot, hours.quot, minuts.quot);
            }else{
                if(IN.tv_nsec == 0){
                    res.len = snprintf((char*)&res.body, 126, "T#%dd%dh%dm%ds", days.quot, hours.quot, minuts.quot, minuts.rem);
                }else{
                    res.len = snprintf((char*)&res.body, 126, "T#%dd%dh%dm%ds%gms", days.quot, hours.quot, minuts.quot, minuts.rem, (LREAL)IN.tv_nsec / 1000000);
                }
            }
        }
    }
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __date_to_string(DATE IN){
    STRING res;
    tm broken_down_time;

    broken_down_time = convert_seconds_to_date_and_time(IN.tv_sec);
    res = (STRING){0,""};
    res.len = snprintf((char*)&res.body, 126, "D#%d-%2.2d-%2.2d",
             broken_down_time.tm_year,
             broken_down_time.tm_mon,
             broken_down_time.tm_day);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __tod_to_string(TOD IN){
    STRING res;
    tm broken_down_time;
    time_t seconds;

    seconds = IN.tv_sec;
    if (seconds >= (24 * (60 * 60))){
  __iec_error();
  return (STRING){9,"TOD#ERROR"};
 }
    broken_down_time = convert_seconds_to_date_and_time(seconds);
    res = (STRING){0,""};
    if(IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126, "TOD#%2.2d:%2.2d:%2.2d",
                 broken_down_time.tm_hour,
                 broken_down_time.tm_min,
                 broken_down_time.tm_sec);
    }else{
        res.len = snprintf((char*)&res.body, 126, "TOD#%2.2d:%2.2d:%09.6f",
                 broken_down_time.tm_hour,
                 broken_down_time.tm_min,
                 (LREAL)broken_down_time.tm_sec + (LREAL)IN.tv_nsec / 1e9);
    }
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __dt_to_string(DT IN){
    STRING res;
    tm broken_down_time;

    broken_down_time = convert_seconds_to_date_and_time(IN.tv_sec);
    if(IN.tv_nsec == 0){
        res.len = snprintf((char*)&res.body, 126, "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%2.2d",
                 broken_down_time.tm_year,
                 broken_down_time.tm_mon,
                 broken_down_time.tm_day,
                 broken_down_time.tm_hour,
                 broken_down_time.tm_min,
                 broken_down_time.tm_sec);
    }else{
        res.len = snprintf((char*)&res.body, 126, "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%09.6f",
                 broken_down_time.tm_year,
                 broken_down_time.tm_mon,
                 broken_down_time.tm_day,
                 broken_down_time.tm_hour,
                 broken_down_time.tm_min,
                 (LREAL)broken_down_time.tm_sec + ((LREAL)IN.tv_nsec / 1e9));
    }
    if(res.len > 126) res.len = 126;
    return res;
}





static inline TOD __date_and_time_to_time_of_day(DT IN) {
 return (TOD){
  IN.tv_sec % (24 * (60 * 60)) + (IN.tv_sec < 0 ? (24 * (60 * 60)) : 0),
  IN.tv_nsec};
}
static inline DATE __date_and_time_to_date(DT IN){
 return (DATE){
  IN.tv_sec - IN.tv_sec % (24 * (60 * 60)) - (IN.tv_sec < 0 ? (24 * (60 * 60)) : 0),
  0};
}





static inline BOOL __test_bcd(LWORD IN) {
 while (IN) {
  if ((IN & 0xf) > 9) return 1;
  IN >>= 4;
 }
 return 0;
}

static inline ULINT __bcd_to_uint(LWORD IN){
    ULINT res = IN & 0xf;
    ULINT factor = 10ULL;

    while (IN >>= 4) {
        res += (IN & 0xf) * factor;
        factor *= 10;
    }
    return res;
}

static inline LWORD __uint_to_bcd(ULINT IN){
    LWORD res = IN % 10;
    USINT shift = 4;

    while (IN /= 10) {
        res |= (IN % 10) << shift;
        shift += 4;
    }
    return res;
}
# 730 "iec_std_lib.h"
 static inline REAL __move_REAL(REAL op1) {return op1;} static inline LREAL __move_LREAL(LREAL op1) {return op1;} static inline SINT __move_SINT(SINT op1) {return op1;} static inline INT __move_INT(INT op1) {return op1;} static inline DINT __move_DINT(DINT op1) {return op1;} static inline LINT __move_LINT(LINT op1) {return op1;} static inline USINT __move_USINT(USINT op1) {return op1;} static inline UINT __move_UINT(UINT op1) {return op1;} static inline UDINT __move_UDINT(UDINT op1) {return op1;} static inline ULINT __move_ULINT(ULINT op1) {return op1;} static inline TIME __move_TIME(TIME op1) {return op1;} static inline BYTE __move_BYTE(BYTE op1) {return op1;} static inline WORD __move_WORD(WORD op1) {return op1;} static inline DWORD __move_DWORD(DWORD op1) {return op1;} static inline LWORD __move_LWORD(LWORD op1) {return op1;} static inline BOOL __move_BOOL(BOOL op1) {return op1;} static inline STRING __move_STRING(STRING op1) {return op1;} static inline DATE __move_DATE(DATE op1) {return op1;} static inline TOD __move_TOD(TOD op1) {return op1;} static inline DT __move_DT(DT op1) {return op1;}
# 739 "iec_std_lib.h"
# 1 "iec_std_functions.h" 1
# 127 "iec_std_functions.h"
static inline BOOL REAL_TO_BOOL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LREAL_TO_BOOL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL SINT_TO_BOOL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL INT_TO_BOOL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL DINT_TO_BOOL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LINT_TO_BOOL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL USINT_TO_BOOL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL UINT_TO_BOOL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL UDINT_TO_BOOL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL ULINT_TO_BOOL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;}
static inline BOOL BYTE_TO_BOOL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL WORD_TO_BOOL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL DWORD_TO_BOOL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LWORD_TO_BOOL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;}







static inline BOOL TIME_TO_BOOL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;}
static inline BOOL DATE_TO_BOOL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;} static inline BOOL TOD_TO_BOOL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;} static inline BOOL DT_TO_BOOL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;}
# 150 "iec_std_functions.h"
static inline REAL BYTE_TO_REAL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL BYTE_TO_LREAL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT BYTE_TO_SINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT BYTE_TO_INT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT BYTE_TO_DINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT BYTE_TO_LINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT BYTE_TO_USINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT BYTE_TO_UINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT BYTE_TO_UDINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT BYTE_TO_ULINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL WORD_TO_REAL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL WORD_TO_LREAL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT WORD_TO_SINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT WORD_TO_INT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT WORD_TO_DINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT WORD_TO_LINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT WORD_TO_USINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT WORD_TO_UINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT WORD_TO_UDINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT WORD_TO_ULINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL DWORD_TO_REAL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL DWORD_TO_LREAL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT DWORD_TO_SINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT DWORD_TO_INT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT DWORD_TO_DINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT DWORD_TO_LINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT DWORD_TO_USINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT DWORD_TO_UINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT DWORD_TO_UDINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT DWORD_TO_ULINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL LWORD_TO_REAL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LWORD_TO_LREAL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT LWORD_TO_SINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT LWORD_TO_INT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT LWORD_TO_DINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT LWORD_TO_LINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT LWORD_TO_USINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT LWORD_TO_UINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT LWORD_TO_UDINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT LWORD_TO_ULINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL BOOL_TO_REAL(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL BOOL_TO_LREAL(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT BOOL_TO_SINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT BOOL_TO_INT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT BOOL_TO_DINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT BOOL_TO_LINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT BOOL_TO_USINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT BOOL_TO_UINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT BOOL_TO_UDINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT BOOL_TO_ULINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
static inline BYTE BYTE_TO_BYTE(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD BYTE_TO_WORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD BYTE_TO_DWORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD BYTE_TO_LWORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE WORD_TO_BYTE(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD WORD_TO_WORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD WORD_TO_DWORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD WORD_TO_LWORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE DWORD_TO_BYTE(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD DWORD_TO_WORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD DWORD_TO_DWORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD DWORD_TO_LWORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE LWORD_TO_BYTE(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD LWORD_TO_WORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD LWORD_TO_DWORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD LWORD_TO_LWORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE BOOL_TO_BYTE(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD BOOL_TO_WORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD BOOL_TO_DWORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD BOOL_TO_LWORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);}




static inline REAL SINT_TO_REAL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL SINT_TO_LREAL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT SINT_TO_SINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT SINT_TO_INT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT SINT_TO_DINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT SINT_TO_LINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT SINT_TO_USINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT SINT_TO_UINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT SINT_TO_UDINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT SINT_TO_ULINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL INT_TO_REAL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL INT_TO_LREAL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT INT_TO_SINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT INT_TO_INT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT INT_TO_DINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT INT_TO_LINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT INT_TO_USINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT INT_TO_UINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT INT_TO_UDINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT INT_TO_ULINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL DINT_TO_REAL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL DINT_TO_LREAL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT DINT_TO_SINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT DINT_TO_INT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT DINT_TO_DINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT DINT_TO_LINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT DINT_TO_USINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT DINT_TO_UINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT DINT_TO_UDINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT DINT_TO_ULINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL LINT_TO_REAL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LINT_TO_LREAL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT LINT_TO_SINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT LINT_TO_INT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT LINT_TO_DINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT LINT_TO_LINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT LINT_TO_USINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT LINT_TO_UINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT LINT_TO_UDINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT LINT_TO_ULINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL USINT_TO_REAL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL USINT_TO_LREAL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT USINT_TO_SINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT USINT_TO_INT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT USINT_TO_DINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT USINT_TO_LINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT USINT_TO_USINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT USINT_TO_UINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT USINT_TO_UDINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT USINT_TO_ULINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL UINT_TO_REAL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL UINT_TO_LREAL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT UINT_TO_SINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT UINT_TO_INT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT UINT_TO_DINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT UINT_TO_LINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT UINT_TO_USINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT UINT_TO_UINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT UINT_TO_UDINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT UINT_TO_ULINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL UDINT_TO_REAL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL UDINT_TO_LREAL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT UDINT_TO_SINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT UDINT_TO_INT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT UDINT_TO_DINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT UDINT_TO_LINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT UDINT_TO_USINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT UDINT_TO_UINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT UDINT_TO_UDINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT UDINT_TO_ULINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL ULINT_TO_REAL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL ULINT_TO_LREAL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT ULINT_TO_SINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT ULINT_TO_INT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT ULINT_TO_DINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT ULINT_TO_LINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT ULINT_TO_USINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT ULINT_TO_UINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT ULINT_TO_UDINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT ULINT_TO_ULINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
static inline BYTE SINT_TO_BYTE(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD SINT_TO_WORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD SINT_TO_DWORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD SINT_TO_LWORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE INT_TO_BYTE(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD INT_TO_WORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD INT_TO_DWORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD INT_TO_LWORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE DINT_TO_BYTE(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD DINT_TO_WORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD DINT_TO_DWORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD DINT_TO_LWORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE LINT_TO_BYTE(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD LINT_TO_WORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD LINT_TO_DWORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD LINT_TO_LWORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE USINT_TO_BYTE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD USINT_TO_WORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD USINT_TO_DWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD USINT_TO_LWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE UINT_TO_BYTE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD UINT_TO_WORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD UINT_TO_DWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD UINT_TO_LWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE UDINT_TO_BYTE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD UDINT_TO_WORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD UDINT_TO_DWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD UDINT_TO_LWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE ULINT_TO_BYTE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD ULINT_TO_WORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD ULINT_TO_DWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD ULINT_TO_LWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);}




static inline BYTE REAL_TO_BYTE(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__real_to_bit(op);} static inline WORD REAL_TO_WORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__real_to_bit(op);} static inline DWORD REAL_TO_DWORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__real_to_bit(op);} static inline LWORD REAL_TO_LWORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__real_to_bit(op);} static inline BYTE LREAL_TO_BYTE(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__real_to_bit(op);} static inline WORD LREAL_TO_WORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__real_to_bit(op);} static inline DWORD LREAL_TO_DWORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__real_to_bit(op);} static inline LWORD LREAL_TO_LWORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__real_to_bit(op);}




static inline SINT REAL_TO_SINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__real_to_sint(op);} static inline INT REAL_TO_INT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__real_to_sint(op);} static inline DINT REAL_TO_DINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__real_to_sint(op);} static inline LINT REAL_TO_LINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__real_to_sint(op);} static inline SINT LREAL_TO_SINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__real_to_sint(op);} static inline INT LREAL_TO_INT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__real_to_sint(op);} static inline DINT LREAL_TO_DINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__real_to_sint(op);} static inline LINT LREAL_TO_LINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__real_to_sint(op);}


static inline USINT REAL_TO_USINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__real_to_uint(op);} static inline UINT REAL_TO_UINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__real_to_uint(op);} static inline UDINT REAL_TO_UDINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__real_to_uint(op);} static inline ULINT REAL_TO_ULINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__real_to_uint(op);} static inline USINT LREAL_TO_USINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__real_to_uint(op);} static inline UINT LREAL_TO_UINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__real_to_uint(op);} static inline UDINT LREAL_TO_UDINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__real_to_uint(op);} static inline ULINT LREAL_TO_ULINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__real_to_uint(op);}




static inline REAL REAL_TO_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL REAL_TO_LREAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline REAL LREAL_TO_REAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LREAL_TO_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);}




static inline TIME BYTE_TO_TIME(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME WORD_TO_TIME(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME DWORD_TO_TIME(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME LWORD_TO_TIME(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME BOOL_TO_TIME(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);}
static inline TIME SINT_TO_TIME(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME INT_TO_TIME(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME DINT_TO_TIME(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME LINT_TO_TIME(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME USINT_TO_TIME(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME UINT_TO_TIME(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME UDINT_TO_TIME(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME ULINT_TO_TIME(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);}


static inline DATE BYTE_TO_DATE(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD BYTE_TO_TOD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT BYTE_TO_DT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE WORD_TO_DATE(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD WORD_TO_TOD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT WORD_TO_DT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE DWORD_TO_DATE(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD DWORD_TO_TOD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT DWORD_TO_DT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE LWORD_TO_DATE(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD LWORD_TO_TOD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT LWORD_TO_DT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE BOOL_TO_DATE(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD BOOL_TO_TOD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT BOOL_TO_DT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);}
static inline DATE SINT_TO_DATE(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD SINT_TO_TOD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT SINT_TO_DT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE INT_TO_DATE(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD INT_TO_TOD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT INT_TO_DT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE DINT_TO_DATE(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD DINT_TO_TOD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT DINT_TO_DT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE LINT_TO_DATE(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD LINT_TO_TOD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT LINT_TO_DT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE USINT_TO_DATE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD USINT_TO_TOD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT USINT_TO_DT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE UINT_TO_DATE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD UINT_TO_TOD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT UINT_TO_DT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE UDINT_TO_DATE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD UDINT_TO_TOD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT UDINT_TO_DT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE ULINT_TO_DATE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD ULINT_TO_TOD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT ULINT_TO_DT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);}




static inline TIME REAL_TO_TIME(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__real_to_time(op);} static inline TIME LREAL_TO_TIME(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__real_to_time(op);}


static inline DATE REAL_TO_DATE(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__real_to_time(op);} static inline TOD REAL_TO_TOD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__real_to_time(op);} static inline DT REAL_TO_DT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__real_to_time(op);} static inline DATE LREAL_TO_DATE(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__real_to_time(op);} static inline TOD LREAL_TO_TOD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__real_to_time(op);} static inline DT LREAL_TO_DT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__real_to_time(op);}




static inline SINT TIME_TO_SINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT TIME_TO_INT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT TIME_TO_DINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT TIME_TO_LINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT TIME_TO_USINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT TIME_TO_UINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT TIME_TO_UDINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT TIME_TO_ULINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);}
static inline BYTE TIME_TO_BYTE(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD TIME_TO_WORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD TIME_TO_DWORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD TIME_TO_LWORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);}
static inline SINT DATE_TO_SINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT DATE_TO_INT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT DATE_TO_DINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT DATE_TO_LINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT DATE_TO_USINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT DATE_TO_UINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT DATE_TO_UDINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT DATE_TO_ULINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);} static inline SINT TOD_TO_SINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT TOD_TO_INT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT TOD_TO_DINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT TOD_TO_LINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT TOD_TO_USINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT TOD_TO_UINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT TOD_TO_UDINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT TOD_TO_ULINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);} static inline SINT DT_TO_SINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT DT_TO_INT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT DT_TO_DINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT DT_TO_LINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT DT_TO_USINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT DT_TO_UINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT DT_TO_UDINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT DT_TO_ULINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);}
static inline BYTE DATE_TO_BYTE(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD DATE_TO_WORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD DATE_TO_DWORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD DATE_TO_LWORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);} static inline BYTE TOD_TO_BYTE(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD TOD_TO_WORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD TOD_TO_DWORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD TOD_TO_LWORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);} static inline BYTE DT_TO_BYTE(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD DT_TO_WORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD DT_TO_DWORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD DT_TO_LWORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);}




static inline REAL TIME_TO_REAL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL TIME_TO_LREAL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);}
static inline REAL DATE_TO_REAL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL DATE_TO_LREAL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);} static inline REAL TOD_TO_REAL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL TOD_TO_LREAL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);} static inline REAL DT_TO_REAL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL DT_TO_LREAL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);}





static inline DATE DT_TO_DATE(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__date_and_time_to_date(op);}
static inline DATE DATE_AND_TIME_TO_DATE(BOOL EN, BOOL *ENO, DT op){
 return DT_TO_DATE(EN, ENO, op);
}
static inline DT DT_TO_DT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__move_DT(op);}
static inline TOD DT_TO_TOD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__date_and_time_to_time_of_day(op);}
static inline DATE DATE_AND_TIME_TO_TIME_OF_DAY(BOOL EN, BOOL *ENO, DT op){
 return DT_TO_TOD(EN, ENO, op);
}

static inline DATE DATE_TO_DATE(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__move_DATE(op);}





static inline TOD TOD_TO_TOD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__move_TOD(op);}
# 238 "iec_std_functions.h"
static inline TIME TIME_TO_TIME(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__move_TIME(op);}



static inline STRING BOOL_TO_STRING(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bool_to_string(op);}

static inline STRING BYTE_TO_STRING(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING WORD_TO_STRING(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING DWORD_TO_STRING(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING LWORD_TO_STRING(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);}




static inline STRING SINT_TO_STRING(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING INT_TO_STRING(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING DINT_TO_STRING(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING LINT_TO_STRING(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);}


static inline STRING USINT_TO_STRING(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING UINT_TO_STRING(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING UDINT_TO_STRING(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING ULINT_TO_STRING(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);}




static inline STRING REAL_TO_STRING(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__real_to_string(op);} static inline STRING LREAL_TO_STRING(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__real_to_string(op);}



static inline STRING DATE_TO_STRING(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__date_to_string(op);}
static inline STRING DT_TO_STRING(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__dt_to_string(op);}
static inline STRING TOD_TO_STRING(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__tod_to_string(op);}


static inline STRING TIME_TO_STRING(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__time_to_string(op);}



static inline BOOL STRING_TO_BOOL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BOOL)__string_to_bool(op);}

static inline BYTE STRING_TO_BYTE(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__string_to_bit(op);} static inline WORD STRING_TO_WORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__string_to_bit(op);} static inline DWORD STRING_TO_DWORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__string_to_bit(op);} static inline LWORD STRING_TO_LWORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__string_to_bit(op);}




static inline SINT STRING_TO_SINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__string_to_sint(op);} static inline INT STRING_TO_INT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__string_to_sint(op);} static inline DINT STRING_TO_DINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__string_to_sint(op);} static inline LINT STRING_TO_LINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__string_to_sint(op);}


static inline USINT STRING_TO_USINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__string_to_uint(op);} static inline UINT STRING_TO_UINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__string_to_uint(op);} static inline UDINT STRING_TO_UDINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__string_to_uint(op);} static inline ULINT STRING_TO_ULINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__string_to_uint(op);}




static inline REAL STRING_TO_REAL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__string_to_real(op);} static inline LREAL STRING_TO_LREAL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__string_to_real(op);}




static inline DATE STRING_TO_DATE(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__string_to_time(op);} static inline TOD STRING_TO_TOD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__string_to_time(op);} static inline DT STRING_TO_DT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__string_to_time(op);}



static inline TIME STRING_TO_TIME(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__string_to_time(op);}
# 303 "iec_std_functions.h"
static inline SINT TRUNC__SINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT TRUNC__INT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT TRUNC__DINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT TRUNC__LINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT TRUNC__USINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT TRUNC__UINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT TRUNC__UDINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT TRUNC__ULINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline SINT TRUNC__SINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT TRUNC__INT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT TRUNC__DINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT TRUNC__LINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT TRUNC__USINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT TRUNC__UINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT TRUNC__UDINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT TRUNC__ULINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
# 316 "iec_std_functions.h"
static inline BYTE USINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);}static inline BYTE USINT_TO_BCD__BYTE__USINT(BOOL EN, BOOL *ENO, USINT op){ return USINT_TO_BCD_BYTE(EN, ENO, op);} static inline WORD USINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);}static inline WORD USINT_TO_BCD__WORD__USINT(BOOL EN, BOOL *ENO, USINT op){ return USINT_TO_BCD_WORD(EN, ENO, op);} static inline DWORD USINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);}static inline DWORD USINT_TO_BCD__DWORD__USINT(BOOL EN, BOOL *ENO, USINT op){ return USINT_TO_BCD_DWORD(EN, ENO, op);} static inline LWORD USINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);}static inline LWORD USINT_TO_BCD__LWORD__USINT(BOOL EN, BOOL *ENO, USINT op){ return USINT_TO_BCD_LWORD(EN, ENO, op);} static inline BYTE UINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);}static inline BYTE UINT_TO_BCD__BYTE__UINT(BOOL EN, BOOL *ENO, UINT op){ return UINT_TO_BCD_BYTE(EN, ENO, op);} static inline WORD UINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);}static inline WORD UINT_TO_BCD__WORD__UINT(BOOL EN, BOOL *ENO, UINT op){ return UINT_TO_BCD_WORD(EN, ENO, op);} static inline DWORD UINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);}static inline DWORD UINT_TO_BCD__DWORD__UINT(BOOL EN, BOOL *ENO, UINT op){ return UINT_TO_BCD_DWORD(EN, ENO, op);} static inline LWORD UINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);}static inline LWORD UINT_TO_BCD__LWORD__UINT(BOOL EN, BOOL *ENO, UINT op){ return UINT_TO_BCD_LWORD(EN, ENO, op);} static inline BYTE UDINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);}static inline BYTE UDINT_TO_BCD__BYTE__UDINT(BOOL EN, BOOL *ENO, UDINT op){ return UDINT_TO_BCD_BYTE(EN, ENO, op);} static inline WORD UDINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);}static inline WORD UDINT_TO_BCD__WORD__UDINT(BOOL EN, BOOL *ENO, UDINT op){ return UDINT_TO_BCD_WORD(EN, ENO, op);} static inline DWORD UDINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);}static inline DWORD UDINT_TO_BCD__DWORD__UDINT(BOOL EN, BOOL *ENO, UDINT op){ return UDINT_TO_BCD_DWORD(EN, ENO, op);} static inline LWORD UDINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);}static inline LWORD UDINT_TO_BCD__LWORD__UDINT(BOOL EN, BOOL *ENO, UDINT op){ return UDINT_TO_BCD_LWORD(EN, ENO, op);} static inline BYTE ULINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);}static inline BYTE ULINT_TO_BCD__BYTE__ULINT(BOOL EN, BOOL *ENO, ULINT op){ return ULINT_TO_BCD_BYTE(EN, ENO, op);} static inline WORD ULINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);}static inline WORD ULINT_TO_BCD__WORD__ULINT(BOOL EN, BOOL *ENO, ULINT op){ return ULINT_TO_BCD_WORD(EN, ENO, op);} static inline DWORD ULINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);}static inline DWORD ULINT_TO_BCD__DWORD__ULINT(BOOL EN, BOOL *ENO, ULINT op){ return ULINT_TO_BCD_DWORD(EN, ENO, op);} static inline LWORD ULINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);}static inline LWORD ULINT_TO_BCD__LWORD__ULINT(BOOL EN, BOOL *ENO, ULINT op){ return ULINT_TO_BCD_LWORD(EN, ENO, op);}
# 329 "iec_std_functions.h"
static inline USINT BYTE_BCD_TO_USINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);}static inline USINT BCD_TO_USINT__USINT__BYTE(BOOL EN, BOOL *ENO, BYTE op){ return BYTE_BCD_TO_USINT(EN, ENO, op);} static inline UINT BYTE_BCD_TO_UINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);}static inline UINT BCD_TO_UINT__UINT__BYTE(BOOL EN, BOOL *ENO, BYTE op){ return BYTE_BCD_TO_UINT(EN, ENO, op);} static inline UDINT BYTE_BCD_TO_UDINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);}static inline UDINT BCD_TO_UDINT__UDINT__BYTE(BOOL EN, BOOL *ENO, BYTE op){ return BYTE_BCD_TO_UDINT(EN, ENO, op);} static inline ULINT BYTE_BCD_TO_ULINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);}static inline ULINT BCD_TO_ULINT__ULINT__BYTE(BOOL EN, BOOL *ENO, BYTE op){ return BYTE_BCD_TO_ULINT(EN, ENO, op);} static inline USINT WORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);}static inline USINT BCD_TO_USINT__USINT__WORD(BOOL EN, BOOL *ENO, WORD op){ return WORD_BCD_TO_USINT(EN, ENO, op);} static inline UINT WORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);}static inline UINT BCD_TO_UINT__UINT__WORD(BOOL EN, BOOL *ENO, WORD op){ return WORD_BCD_TO_UINT(EN, ENO, op);} static inline UDINT WORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);}static inline UDINT BCD_TO_UDINT__UDINT__WORD(BOOL EN, BOOL *ENO, WORD op){ return WORD_BCD_TO_UDINT(EN, ENO, op);} static inline ULINT WORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);}static inline ULINT BCD_TO_ULINT__ULINT__WORD(BOOL EN, BOOL *ENO, WORD op){ return WORD_BCD_TO_ULINT(EN, ENO, op);} static inline USINT DWORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);}static inline USINT BCD_TO_USINT__USINT__DWORD(BOOL EN, BOOL *ENO, DWORD op){ return DWORD_BCD_TO_USINT(EN, ENO, op);} static inline UINT DWORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);}static inline UINT BCD_TO_UINT__UINT__DWORD(BOOL EN, BOOL *ENO, DWORD op){ return DWORD_BCD_TO_UINT(EN, ENO, op);} static inline UDINT DWORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);}static inline UDINT BCD_TO_UDINT__UDINT__DWORD(BOOL EN, BOOL *ENO, DWORD op){ return DWORD_BCD_TO_UDINT(EN, ENO, op);} static inline ULINT DWORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);}static inline ULINT BCD_TO_ULINT__ULINT__DWORD(BOOL EN, BOOL *ENO, DWORD op){ return DWORD_BCD_TO_ULINT(EN, ENO, op);} static inline USINT LWORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);}static inline USINT BCD_TO_USINT__USINT__LWORD(BOOL EN, BOOL *ENO, LWORD op){ return LWORD_BCD_TO_USINT(EN, ENO, op);} static inline UINT LWORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);}static inline UINT BCD_TO_UINT__UINT__LWORD(BOOL EN, BOOL *ENO, LWORD op){ return LWORD_BCD_TO_UINT(EN, ENO, op);} static inline UDINT LWORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);}static inline UDINT BCD_TO_UDINT__UDINT__LWORD(BOOL EN, BOOL *ENO, LWORD op){ return LWORD_BCD_TO_UDINT(EN, ENO, op);} static inline ULINT LWORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN || (__test_bcd(op))) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);}static inline ULINT BCD_TO_ULINT__ULINT__LWORD(BOOL EN, BOOL *ENO, LWORD op){ return LWORD_BCD_TO_ULINT(EN, ENO, op);}
# 405 "iec_std_functions.h"
static inline REAL ABS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline REAL ABS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ABS_REAL(EN, ENO, op);} static inline LREAL ABS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline LREAL ABS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ABS_LREAL(EN, ENO, op);}
static inline SINT ABS_SINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline SINT ABS__SINT__SINT(BOOL EN, BOOL *ENO, SINT op) { return ABS_SINT(EN, ENO, op);} static inline INT ABS_INT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline INT ABS__INT__INT(BOOL EN, BOOL *ENO, INT op) { return ABS_INT(EN, ENO, op);} static inline DINT ABS_DINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline DINT ABS__DINT__DINT(BOOL EN, BOOL *ENO, DINT op) { return ABS_DINT(EN, ENO, op);} static inline LINT ABS_LINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline LINT ABS__LINT__LINT(BOOL EN, BOOL *ENO, LINT op) { return ABS_LINT(EN, ENO, op);}
static inline USINT ABS_USINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline USINT ABS__USINT__USINT(BOOL EN, BOOL *ENO, USINT op) { return ABS_USINT(EN, ENO, op);} static inline UINT ABS_UINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline UINT ABS__UINT__UINT(BOOL EN, BOOL *ENO, UINT op) { return ABS_UINT(EN, ENO, op);} static inline UDINT ABS_UDINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline UDINT ABS__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op) { return ABS_UDINT(EN, ENO, op);} static inline ULINT ABS_ULINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline ULINT ABS__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op) { return ABS_ULINT(EN, ENO, op);}






static inline REAL SQRT_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sqrt(op);} static inline REAL SQRT__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return SQRT_REAL(EN, ENO, op);} static inline LREAL SQRT_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sqrt(op);} static inline LREAL SQRT__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return SQRT_LREAL(EN, ENO, op);}






static inline REAL LN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log(op);} static inline REAL LN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return LN_REAL(EN, ENO, op);} static inline LREAL LN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log(op);} static inline LREAL LN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return LN_LREAL(EN, ENO, op);}






static inline REAL LOG_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log10(op);} static inline REAL LOG__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return LOG_REAL(EN, ENO, op);} static inline LREAL LOG_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log10(op);} static inline LREAL LOG__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return LOG_LREAL(EN, ENO, op);}






static inline REAL EXP_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return exp(op);} static inline REAL EXP__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return EXP_REAL(EN, ENO, op);} static inline LREAL EXP_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return exp(op);} static inline LREAL EXP__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return EXP_LREAL(EN, ENO, op);}






static inline REAL SIN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sin(op);} static inline REAL SIN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return SIN_REAL(EN, ENO, op);} static inline LREAL SIN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sin(op);} static inline LREAL SIN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return SIN_LREAL(EN, ENO, op);}






static inline REAL COS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return cos(op);} static inline REAL COS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return COS_REAL(EN, ENO, op);} static inline LREAL COS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return cos(op);} static inline LREAL COS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return COS_LREAL(EN, ENO, op);}





static inline REAL TAN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return tan(op);} static inline REAL TAN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return TAN_REAL(EN, ENO, op);} static inline LREAL TAN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return tan(op);} static inline LREAL TAN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return TAN_LREAL(EN, ENO, op);}






static inline REAL ASIN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return asin(op);} static inline REAL ASIN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ASIN_REAL(EN, ENO, op);} static inline LREAL ASIN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return asin(op);} static inline LREAL ASIN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ASIN_LREAL(EN, ENO, op);}





static inline REAL ACOS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return acos(op);} static inline REAL ACOS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ACOS_REAL(EN, ENO, op);} static inline LREAL ACOS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return acos(op);} static inline LREAL ACOS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ACOS_LREAL(EN, ENO, op);}





static inline REAL ATAN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return atan(op);} static inline REAL ATAN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ATAN_REAL(EN, ENO, op);} static inline LREAL ATAN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return atan(op);} static inline LREAL ATAN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ATAN_LREAL(EN, ENO, op);}
# 515 "iec_std_functions.h"
static inline REAL ADD_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline REAL ADD__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL ADD_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL ADD__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline SINT ADD_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline SINT ADD__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT ADD_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT ADD__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT ADD_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT ADD__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline LINT ADD_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline LINT ADD__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline USINT ADD_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline USINT ADD__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT ADD_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT ADD__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT ADD_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT ADD__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline ULINT ADD_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;} static inline ULINT ADD__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;}
# 524 "iec_std_functions.h"
static inline REAL MUL_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline REAL MUL__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL MUL_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL MUL__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline SINT MUL_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline SINT MUL__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT MUL_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT MUL__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT MUL_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT MUL__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline LINT MUL_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline LINT MUL__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline USINT MUL_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline USINT MUL__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT MUL_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT MUL__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT MUL_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT MUL__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline ULINT MUL_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;} static inline ULINT MUL__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;}






static inline REAL SUB_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline REAL SUB__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ return SUB_REAL(EN, ENO, op1, op2);} static inline LREAL SUB_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline LREAL SUB__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ return SUB_LREAL(EN, ENO, op1, op2);} static inline SINT SUB_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline SINT SUB__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return SUB_SINT(EN, ENO, op1, op2);} static inline INT SUB_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline INT SUB__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return SUB_INT(EN, ENO, op1, op2);} static inline DINT SUB_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline DINT SUB__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return SUB_DINT(EN, ENO, op1, op2);} static inline LINT SUB_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline LINT SUB__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return SUB_LINT(EN, ENO, op1, op2);} static inline USINT SUB_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline USINT SUB__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return SUB_USINT(EN, ENO, op1, op2);} static inline UINT SUB_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline UINT SUB__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return SUB_UINT(EN, ENO, op1, op2);} static inline UDINT SUB_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline UDINT SUB__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return SUB_UDINT(EN, ENO, op1, op2);} static inline ULINT SUB_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline ULINT SUB__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return SUB_ULINT(EN, ENO, op1, op2);}
# 547 "iec_std_functions.h"
static inline REAL DIV_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline REAL DIV__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ return DIV_REAL(EN, ENO, op1, op2);} static inline LREAL DIV_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline LREAL DIV__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ return DIV_LREAL(EN, ENO, op1, op2);} static inline SINT DIV_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline SINT DIV__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return DIV_SINT(EN, ENO, op1, op2);} static inline INT DIV_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline INT DIV__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return DIV_INT(EN, ENO, op1, op2);} static inline DINT DIV_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline DINT DIV__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return DIV_DINT(EN, ENO, op1, op2);} static inline LINT DIV_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline LINT DIV__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return DIV_LINT(EN, ENO, op1, op2);} static inline USINT DIV_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline USINT DIV__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return DIV_USINT(EN, ENO, op1, op2);} static inline UINT DIV_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline UINT DIV__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return DIV_UINT(EN, ENO, op1, op2);} static inline UDINT DIV_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline UDINT DIV__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return DIV_UDINT(EN, ENO, op1, op2);} static inline ULINT DIV_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline ULINT DIV__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return DIV_ULINT(EN, ENO, op1, op2);}
# 564 "iec_std_functions.h"
static inline SINT MOD_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline SINT MOD__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return MOD_SINT(EN, ENO, op1, op2);} static inline INT MOD_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline INT MOD__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return MOD_INT(EN, ENO, op1, op2);} static inline DINT MOD_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline DINT MOD__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return MOD_DINT(EN, ENO, op1, op2);} static inline LINT MOD_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline LINT MOD__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return MOD_LINT(EN, ENO, op1, op2);} static inline USINT MOD_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline USINT MOD__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return MOD_USINT(EN, ENO, op1, op2);} static inline UINT MOD_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline UINT MOD__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return MOD_UINT(EN, ENO, op1, op2);} static inline UDINT MOD_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline UDINT MOD__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return MOD_UDINT(EN, ENO, op1, op2);} static inline ULINT MOD_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline ULINT MOD__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return MOD_ULINT(EN, ENO, op1, op2);}
# 577 "iec_std_functions.h"
static inline REAL EXPT__REAL__REAL__REAL (BOOL EN, BOOL *ENO, REAL IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__REAL (BOOL EN, BOOL *ENO, LREAL IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__LREAL (BOOL EN, BOOL *ENO, REAL IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__LREAL (BOOL EN, BOOL *ENO, LREAL IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__SINT (BOOL EN, BOOL *ENO, REAL IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__SINT (BOOL EN, BOOL *ENO, LREAL IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__INT (BOOL EN, BOOL *ENO, REAL IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__INT (BOOL EN, BOOL *ENO, LREAL IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__DINT (BOOL EN, BOOL *ENO, REAL IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__DINT (BOOL EN, BOOL *ENO, LREAL IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__LINT (BOOL EN, BOOL *ENO, REAL IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__LINT (BOOL EN, BOOL *ENO, LREAL IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__USINT (BOOL EN, BOOL *ENO, REAL IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__USINT (BOOL EN, BOOL *ENO, LREAL IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__UINT (BOOL EN, BOOL *ENO, REAL IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__UINT (BOOL EN, BOOL *ENO, LREAL IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__UDINT (BOOL EN, BOOL *ENO, REAL IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__UDINT (BOOL EN, BOOL *ENO, LREAL IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__ULINT (BOOL EN, BOOL *ENO, REAL IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__ULINT (BOOL EN, BOOL *ENO, LREAL IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);}
# 591 "iec_std_functions.h"
 static inline REAL MOVE_REAL(BOOL EN, BOOL *ENO, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LREAL MOVE_LREAL(BOOL EN, BOOL *ENO, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline SINT MOVE_SINT(BOOL EN, BOOL *ENO, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline INT MOVE_INT(BOOL EN, BOOL *ENO, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DINT MOVE_DINT(BOOL EN, BOOL *ENO, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LINT MOVE_LINT(BOOL EN, BOOL *ENO, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline USINT MOVE_USINT(BOOL EN, BOOL *ENO, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UINT MOVE_UINT(BOOL EN, BOOL *ENO, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UDINT MOVE_UDINT(BOOL EN, BOOL *ENO, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline ULINT MOVE_ULINT(BOOL EN, BOOL *ENO, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TIME MOVE_TIME(BOOL EN, BOOL *ENO, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BYTE MOVE_BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline WORD MOVE_WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DWORD MOVE_DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LWORD MOVE_LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BOOL MOVE_BOOL(BOOL EN, BOOL *ENO, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline STRING MOVE_STRING(BOOL EN, BOOL *ENO, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DATE MOVE_DATE(BOOL EN, BOOL *ENO, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TOD MOVE_TOD(BOOL EN, BOOL *ENO, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DT MOVE_DT(BOOL EN, BOOL *ENO, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;}
# 600 "iec_std_functions.h"
 static inline REAL MOVE__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LREAL MOVE__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline SINT MOVE__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline INT MOVE__INT__INT(BOOL EN, BOOL *ENO, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DINT MOVE__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LINT MOVE__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline USINT MOVE__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UINT MOVE__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UDINT MOVE__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline ULINT MOVE__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TIME MOVE__TIME__TIME(BOOL EN, BOOL *ENO, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BYTE MOVE__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline WORD MOVE__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DWORD MOVE__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LWORD MOVE__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BOOL MOVE__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline STRING MOVE__STRING__STRING(BOOL EN, BOOL *ENO, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DATE MOVE__DATE__DATE(BOOL EN, BOOL *ENO, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TOD MOVE__TOD__TOD(BOOL EN, BOOL *ENO, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DT MOVE__DT__DT(BOOL EN, BOOL *ENO, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;}
# 638 "iec_std_functions.h"
static inline BOOL SHL__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; }





static inline BYTE SHL__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;}
# 657 "iec_std_functions.h"
static inline BOOL SHR__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; }





static inline BYTE SHR__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;}
# 676 "iec_std_functions.h"
static inline BOOL ROR__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; }
# 686 "iec_std_functions.h"
static inline BYTE ROR__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));}
# 699 "iec_std_functions.h"
static inline BOOL ROL__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; }
# 709 "iec_std_functions.h"
static inline BYTE ROL__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));}
# 721 "iec_std_functions.h"
static inline BOOL AND_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 && __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}
static inline BOOL AND__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 && __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}




static inline BYTE AND_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline BYTE AND__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD AND_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD AND__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD AND_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD AND__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline LWORD AND_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;} static inline LWORD AND__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;}





static inline BOOL OR_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 || __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}
static inline BOOL OR__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 || __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}




static inline BYTE OR_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline BYTE OR__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD OR_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD OR__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD OR_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD OR__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline LWORD OR_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;} static inline LWORD OR__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;}
# 762 "iec_std_functions.h"
static inline BOOL XOR_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = (op1 && !tmp) || (!op1 && tmp); } __builtin_va_end(ap); return op1; }
static inline BOOL XOR__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = (op1 && !tmp) || (!op1 && tmp); } __builtin_va_end(ap); return op1; }
# 776 "iec_std_functions.h"
static inline BOOL NOT_BOOL(BOOL EN, BOOL *ENO, BOOL op1){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return !op1;
}


static inline BOOL NOT__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL op1){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return !op1;
}







static inline BYTE NOT_BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline WORD NOT_WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline DWORD NOT_DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline LWORD NOT_LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;}
# 802 "iec_std_functions.h"
static inline BYTE NOT__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline WORD NOT__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline DWORD NOT__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline LWORD NOT__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;}
# 831 "iec_std_functions.h"
 static inline REAL SEL_REAL(BOOL EN, BOOL *ENO, BOOL G, REAL op0, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LREAL SEL_LREAL(BOOL EN, BOOL *ENO, BOOL G, LREAL op0, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline SINT SEL_SINT(BOOL EN, BOOL *ENO, BOOL G, SINT op0, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline INT SEL_INT(BOOL EN, BOOL *ENO, BOOL G, INT op0, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DINT SEL_DINT(BOOL EN, BOOL *ENO, BOOL G, DINT op0, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LINT SEL_LINT(BOOL EN, BOOL *ENO, BOOL G, LINT op0, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline USINT SEL_USINT(BOOL EN, BOOL *ENO, BOOL G, USINT op0, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UINT SEL_UINT(BOOL EN, BOOL *ENO, BOOL G, UINT op0, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UDINT SEL_UDINT(BOOL EN, BOOL *ENO, BOOL G, UDINT op0, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline ULINT SEL_ULINT(BOOL EN, BOOL *ENO, BOOL G, ULINT op0, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TIME SEL_TIME(BOOL EN, BOOL *ENO, BOOL G, TIME op0, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BYTE SEL_BYTE(BOOL EN, BOOL *ENO, BOOL G, BYTE op0, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline WORD SEL_WORD(BOOL EN, BOOL *ENO, BOOL G, WORD op0, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DWORD SEL_DWORD(BOOL EN, BOOL *ENO, BOOL G, DWORD op0, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LWORD SEL_LWORD(BOOL EN, BOOL *ENO, BOOL G, LWORD op0, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BOOL SEL_BOOL(BOOL EN, BOOL *ENO, BOOL G, BOOL op0, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline STRING SEL_STRING(BOOL EN, BOOL *ENO, BOOL G, STRING op0, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DATE SEL_DATE(BOOL EN, BOOL *ENO, BOOL G, DATE op0, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TOD SEL_TOD(BOOL EN, BOOL *ENO, BOOL G, TOD op0, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DT SEL_DT(BOOL EN, BOOL *ENO, BOOL G, DT op0, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;}
# 840 "iec_std_functions.h"
 static inline REAL SEL__REAL__BOOL__REAL__REAL(BOOL EN, BOOL *ENO, BOOL G, REAL op0, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LREAL SEL__LREAL__BOOL__LREAL__LREAL(BOOL EN, BOOL *ENO, BOOL G, LREAL op0, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline SINT SEL__SINT__BOOL__SINT__SINT(BOOL EN, BOOL *ENO, BOOL G, SINT op0, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline INT SEL__INT__BOOL__INT__INT(BOOL EN, BOOL *ENO, BOOL G, INT op0, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DINT SEL__DINT__BOOL__DINT__DINT(BOOL EN, BOOL *ENO, BOOL G, DINT op0, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LINT SEL__LINT__BOOL__LINT__LINT(BOOL EN, BOOL *ENO, BOOL G, LINT op0, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline USINT SEL__USINT__BOOL__USINT__USINT(BOOL EN, BOOL *ENO, BOOL G, USINT op0, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UINT SEL__UINT__BOOL__UINT__UINT(BOOL EN, BOOL *ENO, BOOL G, UINT op0, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UDINT SEL__UDINT__BOOL__UDINT__UDINT(BOOL EN, BOOL *ENO, BOOL G, UDINT op0, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline ULINT SEL__ULINT__BOOL__ULINT__ULINT(BOOL EN, BOOL *ENO, BOOL G, ULINT op0, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TIME SEL__TIME__BOOL__TIME__TIME(BOOL EN, BOOL *ENO, BOOL G, TIME op0, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BYTE SEL__BYTE__BOOL__BYTE__BYTE(BOOL EN, BOOL *ENO, BOOL G, BYTE op0, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline WORD SEL__WORD__BOOL__WORD__WORD(BOOL EN, BOOL *ENO, BOOL G, WORD op0, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DWORD SEL__DWORD__BOOL__DWORD__DWORD(BOOL EN, BOOL *ENO, BOOL G, DWORD op0, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LWORD SEL__LWORD__BOOL__LWORD__LWORD(BOOL EN, BOOL *ENO, BOOL G, LWORD op0, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BOOL SEL__BOOL__BOOL__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL G, BOOL op0, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline STRING SEL__STRING__BOOL__STRING__STRING(BOOL EN, BOOL *ENO, BOOL G, STRING op0, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DATE SEL__DATE__BOOL__DATE__DATE(BOOL EN, BOOL *ENO, BOOL G, DATE op0, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TOD SEL__TOD__BOOL__TOD__TOD(BOOL EN, BOOL *ENO, BOOL G, TOD op0, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DT SEL__DT__BOOL__DT__DT(BOOL EN, BOOL *ENO, BOOL G, DT op0, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;}
# 869 "iec_std_functions.h"
static inline BYTE MAX_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BYTE MAX__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MAX_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MAX__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MAX_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MAX__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MAX_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MAX__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BOOL MAX_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BOOL MAX__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline REAL MAX_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline REAL MAX__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MAX_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MAX__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MAX_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MAX__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MAX_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MAX__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MAX_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MAX__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MAX_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MAX__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MAX_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MAX__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MAX_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MAX__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MAX_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MAX__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MAX_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MAX__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}






static inline DATE MAX_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DATE MAX__DATE__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MAX_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MAX__TOD__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MAX_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MAX__DT__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline TIME MAX_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TIME MAX__TIME__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}





static inline STRING MAX_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline STRING MAX__STRING__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
# 894 "iec_std_functions.h"
static inline BYTE MIN_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BYTE MIN__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MIN_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MIN__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MIN_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MIN__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MIN_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MIN__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline REAL MIN_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline REAL MIN__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MIN_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MIN__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MIN_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MIN__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MIN_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MIN__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MIN_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MIN__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MIN_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MIN__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MIN_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MIN__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MIN_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MIN__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MIN_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MIN__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MIN_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MIN__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}






static inline DATE MIN_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DATE MIN__DATE__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MIN_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MIN__TOD__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MIN_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MIN__DT__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline TIME MIN_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TIME MIN__TIME__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}



static inline STRING MIN_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline STRING MIN__STRING__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
# 926 "iec_std_functions.h"
static inline BYTE LIMIT_BYTE(BOOL EN, BOOL *ENO, BYTE MN, BYTE IN, BYTE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline BYTE LIMIT__BYTE__BYTE__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE MN, BYTE IN, BYTE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline WORD LIMIT_WORD(BOOL EN, BOOL *ENO, WORD MN, WORD IN, WORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline WORD LIMIT__WORD__WORD__WORD__WORD(BOOL EN, BOOL *ENO, WORD MN, WORD IN, WORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DWORD LIMIT_DWORD(BOOL EN, BOOL *ENO, DWORD MN, DWORD IN, DWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DWORD LIMIT__DWORD__DWORD__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD MN, DWORD IN, DWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LWORD LIMIT_LWORD(BOOL EN, BOOL *ENO, LWORD MN, LWORD IN, LWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LWORD LIMIT__LWORD__LWORD__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD MN, LWORD IN, LWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;}
static inline REAL LIMIT_REAL(BOOL EN, BOOL *ENO, REAL MN, REAL IN, REAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline REAL LIMIT__REAL__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL MN, REAL IN, REAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LREAL LIMIT_LREAL(BOOL EN, BOOL *ENO, LREAL MN, LREAL IN, LREAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LREAL LIMIT__LREAL__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL MN, LREAL IN, LREAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline SINT LIMIT_SINT(BOOL EN, BOOL *ENO, SINT MN, SINT IN, SINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline SINT LIMIT__SINT__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT MN, SINT IN, SINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline INT LIMIT_INT(BOOL EN, BOOL *ENO, INT MN, INT IN, INT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline INT LIMIT__INT__INT__INT__INT(BOOL EN, BOOL *ENO, INT MN, INT IN, INT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DINT LIMIT_DINT(BOOL EN, BOOL *ENO, DINT MN, DINT IN, DINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DINT LIMIT__DINT__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT MN, DINT IN, DINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LINT LIMIT_LINT(BOOL EN, BOOL *ENO, LINT MN, LINT IN, LINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LINT LIMIT__LINT__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT MN, LINT IN, LINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline USINT LIMIT_USINT(BOOL EN, BOOL *ENO, USINT MN, USINT IN, USINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline USINT LIMIT__USINT__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT MN, USINT IN, USINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UINT LIMIT_UINT(BOOL EN, BOOL *ENO, UINT MN, UINT IN, UINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UINT LIMIT__UINT__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT MN, UINT IN, UINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UDINT LIMIT_UDINT(BOOL EN, BOOL *ENO, UDINT MN, UDINT IN, UDINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UDINT LIMIT__UDINT__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT MN, UDINT IN, UDINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline ULINT LIMIT_ULINT(BOOL EN, BOOL *ENO, ULINT MN, ULINT IN, ULINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline ULINT LIMIT__ULINT__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT MN, ULINT IN, ULINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;}
# 948 "iec_std_functions.h"
static inline DATE LIMIT_DATE(BOOL EN, BOOL *ENO, DATE MN, DATE IN, DATE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DATE LIMIT__DATE__DATE__DATE__DATE(BOOL EN, BOOL *ENO, DATE MN, DATE IN, DATE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TOD LIMIT_TOD(BOOL EN, BOOL *ENO, TOD MN, TOD IN, TOD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TOD LIMIT__TOD__TOD__TOD__TOD(BOOL EN, BOOL *ENO, TOD MN, TOD IN, TOD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DT LIMIT_DT(BOOL EN, BOOL *ENO, DT MN, DT IN, DT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DT LIMIT__DT__DT__DT__DT(BOOL EN, BOOL *ENO, DT MN, DT IN, DT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;}
static inline TIME LIMIT_TIME(BOOL EN, BOOL *ENO, TIME MN, TIME IN, TIME MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TIME LIMIT__TIME__TIME__TIME__TIME(BOOL EN, BOOL *ENO, TIME MN, TIME IN, TIME MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;}




static inline STRING LIMIT_STRING(BOOL EN, BOOL *ENO, STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
    return memcmp((char*)&IN.body,(char*)&MN.body, IN.len < MN.len ? IN.len : MN.len) > 0 ? memcmp((char*)&IN.body,(char*)&MX.body, IN.len < MX.len ? IN.len : MX.len) < 0 ? IN : MX : MN;
}


static inline STRING LIMIT__STRING__STRING__STRING__STRING(BOOL EN, BOOL *ENO, STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
    return memcmp((char*)&IN.body,(char*)&MN.body, IN.len < MN.len ? IN.len : MN.len) > 0 ? memcmp((char*)&IN.body,(char*)&MX.body, IN.len < MX.len ? IN.len : MX.len) < 0 ? IN : MX : MN;
}
# 998 "iec_std_functions.h"
 static inline REAL MUX__REAL__SINT__REAL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__INT__REAL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__DINT__REAL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__LINT__REAL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__USINT__REAL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__UINT__REAL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__UDINT__REAL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__ULINT__REAL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__SINT__LREAL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__INT__LREAL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__DINT__LREAL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__LINT__LREAL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__USINT__LREAL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__UINT__LREAL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__UDINT__LREAL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__ULINT__LREAL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__INT__SINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__DINT__SINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__LINT__SINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__USINT__SINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__UINT__SINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__UDINT__SINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__ULINT__SINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__SINT__INT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__INT__INT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__DINT__INT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__LINT__INT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__USINT__INT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__UINT__INT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__UDINT__INT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__ULINT__INT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__SINT__DINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__INT__DINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__LINT__DINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__USINT__DINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__UINT__DINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__UDINT__DINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__ULINT__DINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__SINT__LINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__INT__LINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__DINT__LINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__USINT__LINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__UINT__LINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__UDINT__LINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__ULINT__LINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__SINT__USINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__INT__USINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__DINT__USINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__LINT__USINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__UINT__USINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__UDINT__USINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__ULINT__USINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__SINT__UINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__INT__UINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__DINT__UINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__LINT__UINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__USINT__UINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__UDINT__UINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__ULINT__UINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__SINT__UDINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__INT__UDINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__DINT__UDINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__LINT__UDINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__USINT__UDINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__UINT__UDINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__ULINT__UDINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__SINT__ULINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__INT__ULINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__DINT__ULINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__LINT__ULINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__USINT__ULINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__UINT__ULINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__UDINT__ULINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__SINT__TIME(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__INT__TIME(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__DINT__TIME(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__LINT__TIME(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__USINT__TIME(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__UINT__TIME(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__UDINT__TIME(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__ULINT__TIME(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__SINT__BYTE(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__INT__BYTE(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__DINT__BYTE(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__LINT__BYTE(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__USINT__BYTE(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__UINT__BYTE(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__UDINT__BYTE(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__ULINT__BYTE(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__SINT__WORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__INT__WORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__DINT__WORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__LINT__WORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__USINT__WORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__UINT__WORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__UDINT__WORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__ULINT__WORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__SINT__DWORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__INT__DWORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__DINT__DWORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__LINT__DWORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__USINT__DWORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__UINT__DWORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__UDINT__DWORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__ULINT__DWORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__SINT__LWORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__INT__LWORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__DINT__LWORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__LINT__LWORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__USINT__LWORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__UINT__LWORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__UDINT__LWORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__ULINT__LWORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__SINT__BOOL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__INT__BOOL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__DINT__BOOL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__LINT__BOOL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__USINT__BOOL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__UINT__BOOL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__UDINT__BOOL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__ULINT__BOOL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__SINT__STRING(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__INT__STRING(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__DINT__STRING(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__LINT__STRING(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__USINT__STRING(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__UINT__STRING(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__UDINT__STRING(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__ULINT__STRING(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__SINT__DATE(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__INT__DATE(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__DINT__DATE(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__LINT__DATE(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__USINT__DATE(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__UINT__DATE(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__UDINT__DATE(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__ULINT__DATE(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__SINT__TOD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__INT__TOD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__DINT__TOD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__LINT__TOD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__USINT__TOD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__UINT__TOD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__UDINT__TOD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__ULINT__TOD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__SINT__DT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__INT__DT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__DINT__DT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__LINT__DT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__USINT__DT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__UINT__DT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__UDINT__DT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__ULINT__DT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;}
# 1044 "iec_std_functions.h"
static inline BOOL GT_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL GT_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL GT_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1067 "iec_std_functions.h"
static inline BOOL GE_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL GE_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL GE_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1092 "iec_std_functions.h"
static inline BOOL EQ_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL EQ_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL EQ_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1116 "iec_std_functions.h"
static inline BOOL LT_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL LT_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL LT_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1140 "iec_std_functions.h"
static inline BOOL LE_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL LE_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL LE_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1182 "iec_std_functions.h"
static inline BOOL NE_BYTE(BOOL EN, BOOL *ENO, BYTE op1, BYTE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1, BYTE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_WORD(BOOL EN, BOOL *ENO, WORD op1, WORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1, WORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_DWORD(BOOL EN, BOOL *ENO, DWORD op1, DWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1, DWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LWORD(BOOL EN, BOOL *ENO, LWORD op1, LWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1, LWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;}
static inline BOOL NE_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;}






static inline BOOL NE_DATE(BOOL EN, BOOL *ENO, DATE op1, DATE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__DATE__DATE(BOOL EN, BOOL *ENO, DATE op1, DATE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE_TOD(BOOL EN, BOOL *ENO, TOD op1, TOD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__TOD__TOD(BOOL EN, BOOL *ENO, TOD op1, TOD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE_DT(BOOL EN, BOOL *ENO, DT op1, DT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__DT__DT(BOOL EN, BOOL *ENO, DT op1, DT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;}
static inline BOOL NE_TIME(BOOL EN, BOOL *ENO, TIME op1, TIME op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__TIME__TIME(BOOL EN, BOOL *ENO, TIME op1, TIME op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;}



static inline BOOL NE_STRING(BOOL EN, BOOL *ENO, STRING op1, STRING op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return memcmp((char*)&op1.body,(char*)&op2.body, op1.len < op2.len ? op1.len : op2.len) != 0 ? 1 : 0;}
static inline BOOL NE__BOOL__STRING__STRING(BOOL EN, BOOL *ENO, STRING op1, STRING op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return memcmp((char*)&op1.body,(char*)&op2.body, op1.len < op2.len ? op1.len : op2.len) != 0 ? 1 : 0;}
# 1224 "iec_std_functions.h"
static inline __strlen_t __len(STRING IN) {return IN.len;}
# 1234 "iec_std_functions.h"
static inline SINT LEN__SINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__len(par1);} static inline INT LEN__INT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__len(par1);} static inline DINT LEN__DINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__len(par1);} static inline LINT LEN__LINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__len(par1);} static inline USINT LEN__USINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__len(par1);} static inline UINT LEN__UINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__len(par1);} static inline UDINT LEN__UDINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__len(par1);} static inline ULINT LEN__ULINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__len(par1);}
# 1252 "iec_std_functions.h"
static inline STRING LEFT__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (SINT)IN.len ? L : (SINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING IN, INT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (INT)IN.len ? L : (INT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (DINT)IN.len ? L : (DINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (LINT)IN.len ? L : (LINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (USINT)IN.len ? L : (USINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UINT)IN.len ? L : (UINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UDINT)IN.len ? L : (UDINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING LEFT__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (ULINT)IN.len ? L : (ULINT)IN.len; memcpy(&res.body, &IN.body, (size_t)L); res.len = (__strlen_t)L; return res;}
# 1269 "iec_std_functions.h"
static inline STRING RIGHT__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (SINT)IN.len ? L : (SINT)IN.len; memcpy(&res.body, &IN.body[(SINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING IN, INT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (INT)IN.len ? L : (INT)IN.len; memcpy(&res.body, &IN.body[(INT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (DINT)IN.len ? L : (DINT)IN.len; memcpy(&res.body, &IN.body[(DINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (LINT)IN.len ? L : (LINT)IN.len; memcpy(&res.body, &IN.body[(LINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (USINT)IN.len ? L : (USINT)IN.len; memcpy(&res.body, &IN.body[(USINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UINT)IN.len ? L : (UINT)IN.len; memcpy(&res.body, &IN.body[(UINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UDINT)IN.len ? L : (UDINT)IN.len; memcpy(&res.body, &IN.body[(UDINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;} static inline STRING RIGHT__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (ULINT)IN.len ? L : (ULINT)IN.len; memcpy(&res.body, &IN.body[(ULINT)IN.len - L], (size_t)L); res.len = (__strlen_t)L; return res;}
# 1289 "iec_std_functions.h"
static inline STRING MID__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L, SINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (SINT)IN.len){ P -= 1; L = L + P <= (SINT)IN.len ? L : (SINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING IN, INT L, INT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (INT)IN.len){ P -= 1; L = L + P <= (INT)IN.len ? L : (INT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L, DINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (DINT)IN.len){ P -= 1; L = L + P <= (DINT)IN.len ? L : (DINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L, LINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (LINT)IN.len){ P -= 1; L = L + P <= (LINT)IN.len ? L : (LINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L, USINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (USINT)IN.len){ P -= 1; L = L + P <= (USINT)IN.len ? L : (USINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L, UINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (UINT)IN.len){ P -= 1; L = L + P <= (UINT)IN.len ? L : (UINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L, UDINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (UDINT)IN.len){ P -= 1; L = L + P <= (UDINT)IN.len ? L : (UDINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;} static inline STRING MID__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L, ULINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (ULINT)IN.len){ P -= 1; L = L + P <= (ULINT)IN.len ? L : (ULINT)IN.len - P; memcpy(&res.body, &IN.body[P] , (size_t)L); res.len = (__strlen_t)L; } return res;}






static inline STRING CONCAT(BOOL EN, BOOL *ENO, UINT param_count, ...){
  UINT i;
  STRING res;
  va_list ap;
  __strlen_t charcount;
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  charcount = 0;
  res = (STRING){0,""};

  __builtin_va_start(ap,param_count);

  for (i = 0; i < param_count && charcount < 126; i++)
  {
    STRING tmp = __builtin_va_arg(ap,STRING);
    __strlen_t charrem = 126 - charcount;
    __strlen_t to_write = tmp.len > charrem ? charrem : tmp.len;
    memcpy(&res.body[charcount], &tmp.body , to_write);
    charcount += to_write;
  }

  res.len = charcount;

  __builtin_va_end(ap);
  return res;
}





static inline STRING __insert(STRING IN1, STRING IN2, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN1.len ? IN1.len : P;
    memcpy(&res.body, &IN1.body , to_copy);
    P = res.len = to_copy;

    to_copy = IN2.len + res.len > 126 ? 126 - res.len : IN2.len;
    memcpy(&res.body[res.len], &IN2.body , to_copy);
    res.len += to_copy;

    to_copy = IN1.len - P < 126 - res.len ? IN1.len - P : 126 - res.len ;
    memcpy(&res.body[res.len], &IN1.body[P] , to_copy);
    res.len += to_copy;

    return res;
}






static inline STRING INSERT__STRING__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, SINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, INT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, DINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, LINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, USINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UDINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);} static inline STRING INSERT__STRING__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, ULINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,(__strlen_t)P);}







static inline STRING __delete(STRING IN, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN.len ? IN.len : P-1;
    memcpy(&res.body, &IN.body , to_copy);
    P = res.len = to_copy;

    if( IN.len > P + L ){
        to_copy = IN.len - P - L;
        memcpy(&res.body[res.len], &IN.body[P + L], to_copy);
        res.len += to_copy;
    }

    return res;
}






static inline STRING DELETE__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING str, SINT L, SINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING str, INT L, INT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING str, DINT L, DINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING str, LINT L, LINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING str, USINT L, USINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING str, UINT L, UINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING str, UDINT L, UDINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);} static inline STRING DELETE__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING str, ULINT L, ULINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,(__strlen_t)L,(__strlen_t)P);}







static inline STRING __replace(STRING IN1, STRING IN2, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN1.len ? IN1.len : P-1;
    memcpy(&res.body, &IN1.body , to_copy);
    P = res.len = to_copy;

    to_copy = IN2.len < L ? IN2.len : L;

    if( to_copy + res.len > 126 )
       to_copy = 126 - res.len;

    memcpy(&res.body[res.len], &IN2.body , to_copy);
    res.len += to_copy;

    P += L;
    if( res.len < 126 && P < IN1.len)
    {
        to_copy = IN1.len - P;
        memcpy(&res.body[res.len], &IN1.body[P] , to_copy);
        res.len += to_copy;
    }

    return res;
}






static inline STRING REPLACE__STRING__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, SINT L, SINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, INT L, INT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, DINT L, DINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, LINT L, LINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, USINT L, USINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UINT L, UINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UDINT L, UDINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);} static inline STRING REPLACE__STRING__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, ULINT L, ULINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,(__strlen_t)L,(__strlen_t)P);}






static inline __strlen_t __pfind(STRING* IN1, STRING* IN2){
    UINT count1 = 0;
    UINT count2 = 0;
    while(count1 + count2 < IN1->len && count2 < IN2->len)
    {
        if(IN1->body[count1 + count2] != IN2->body[count2]){
            count1 += count2 + 1;
            count2 = 0;
        }
        else {
            count2++;
        }
    }
    return count2 == IN2->len -1 ? 0 : count1 + 1;
}






static inline SINT FIND__SINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__pfind(&str1,&str2);} static inline INT FIND__INT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__pfind(&str1,&str2);} static inline DINT FIND__DINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__pfind(&str1,&str2);} static inline LINT FIND__LINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__pfind(&str1,&str2);} static inline USINT FIND__USINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__pfind(&str1,&str2);} static inline UINT FIND__UINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__pfind(&str1,&str2);} static inline UDINT FIND__UDINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__pfind(&str1,&str2);} static inline ULINT FIND__ULINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__pfind(&str1,&str2);}
# 1467 "iec_std_functions.h"
static inline TIME ADD_TIME(BOOL EN, BOOL *ENO, TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline TOD ADD_TOD_TIME(BOOL EN, BOOL *ENO, TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline DT ADD_DT_TIME(BOOL EN, BOOL *ENO, DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline TIME SUB_TIME(BOOL EN, BOOL *ENO, TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DATE_DATE(BOOL EN, BOOL *ENO, DATE IN1, DATE IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TOD SUB_TOD_TIME(BOOL EN, BOOL *ENO, TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_TOD_TOD(BOOL EN, BOOL *ENO, TOD IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline DT SUB_DT_TIME(BOOL EN, BOOL *ENO, DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DT_DT(BOOL EN, BOOL *ENO, DT IN1, DT IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}
# 1519 "iec_std_functions.h"
static inline TIME MULTIME__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MULTIME__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);}
# 1528 "iec_std_functions.h"
static inline TIME MUL__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);} static inline TIME MUL__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, (LREAL)IN2);}
# 1537 "iec_std_functions.h"
static inline TIME DIVTIME__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIVTIME__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);}
# 1546 "iec_std_functions.h"
static inline TIME DIV__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);} static inline TIME DIV__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, (LREAL)IN2);}



static inline DT CONCAT_DATE_TOD(BOOL EN, BOOL *ENO, DATE IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}
# 740 "iec_std_lib.h" 2
# 1 "iec_std_FB.h" 1
# 24 "iec_std_FB.h"
# 1 "accessor.h" 1
# 25 "iec_std_FB.h" 2





typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CLK;
  __IEC_BOOL_t Q;


  __IEC_BOOL_t M;

} R_TRIG;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CLK;
  __IEC_BOOL_t Q;


  __IEC_BOOL_t M;

} F_TRIG;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t S1;
  __IEC_BOOL_t R;
  __IEC_BOOL_t Q1;



} SR;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t S;
  __IEC_BOOL_t R1;
  __IEC_BOOL_t Q1;



} RS;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t R;
  __IEC_INT_t PV;
  __IEC_BOOL_t Q;
  __IEC_INT_t CV;


  R_TRIG CU_T;

} CTU;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t R;
  __IEC_DINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_DINT_t CV;


  R_TRIG CU_T;

} CTU_DINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t R;
  __IEC_LINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_LINT_t CV;


  R_TRIG CU_T;

} CTU_LINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t R;
  __IEC_UDINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_UDINT_t CV;


  R_TRIG CU_T;

} CTU_UDINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t R;
  __IEC_ULINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_ULINT_t CV;


  R_TRIG CU_T;

} CTU_ULINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t LD;
  __IEC_INT_t PV;
  __IEC_BOOL_t Q;
  __IEC_INT_t CV;


  R_TRIG CD_T;

} CTD;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t LD;
  __IEC_DINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_DINT_t CV;


  R_TRIG CD_T;

} CTD_DINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t LD;
  __IEC_LINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_LINT_t CV;


  R_TRIG CD_T;

} CTD_LINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t LD;
  __IEC_UDINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_UDINT_t CV;


  R_TRIG CD_T;

} CTD_UDINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t LD;
  __IEC_ULINT_t PV;
  __IEC_BOOL_t Q;
  __IEC_ULINT_t CV;


  R_TRIG CD_T;

} CTD_ULINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t R;
  __IEC_BOOL_t LD;
  __IEC_INT_t PV;
  __IEC_BOOL_t QU;
  __IEC_BOOL_t QD;
  __IEC_INT_t CV;


  R_TRIG CD_T;
  R_TRIG CU_T;

} CTUD;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t R;
  __IEC_BOOL_t LD;
  __IEC_DINT_t PV;
  __IEC_BOOL_t QU;
  __IEC_BOOL_t QD;
  __IEC_DINT_t CV;


  R_TRIG CD_T;
  R_TRIG CU_T;

} CTUD_DINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t R;
  __IEC_BOOL_t LD;
  __IEC_LINT_t PV;
  __IEC_BOOL_t QU;
  __IEC_BOOL_t QD;
  __IEC_LINT_t CV;


  R_TRIG CD_T;
  R_TRIG CU_T;

} CTUD_LINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t R;
  __IEC_BOOL_t LD;
  __IEC_UDINT_t PV;
  __IEC_BOOL_t QU;
  __IEC_BOOL_t QD;
  __IEC_UDINT_t CV;


  R_TRIG CD_T;
  R_TRIG CU_T;

} CTUD_UDINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CU;
  __IEC_BOOL_t CD;
  __IEC_BOOL_t R;
  __IEC_BOOL_t LD;
  __IEC_ULINT_t PV;
  __IEC_BOOL_t QU;
  __IEC_BOOL_t QD;
  __IEC_ULINT_t CV;


  R_TRIG CD_T;
  R_TRIG CU_T;

} CTUD_ULINT;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t IN;
  __IEC_TIME_t PT;
  __IEC_BOOL_t Q;
  __IEC_TIME_t ET;


  __IEC_SINT_t STATE;
  __IEC_BOOL_t PREV_IN;
  __IEC_TIME_t CURRENT_TIME;
  __IEC_TIME_t START_TIME;

} TP;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t IN;
  __IEC_TIME_t PT;
  __IEC_BOOL_t Q;
  __IEC_TIME_t ET;


  __IEC_SINT_t STATE;
  __IEC_BOOL_t PREV_IN;
  __IEC_TIME_t CURRENT_TIME;
  __IEC_TIME_t START_TIME;

} TON;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t IN;
  __IEC_TIME_t PT;
  __IEC_BOOL_t Q;
  __IEC_TIME_t ET;


  __IEC_SINT_t STATE;
  __IEC_BOOL_t PREV_IN;
  __IEC_TIME_t CURRENT_TIME;
  __IEC_TIME_t START_TIME;

} TOF;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t RUN;
  __IEC_REAL_t XIN;
  __IEC_TIME_t CYCLE;
  __IEC_REAL_t XOUT;


  __IEC_REAL_t X1;
  __IEC_REAL_t X2;
  __IEC_REAL_t X3;

} DERIVATIVE;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_REAL_t XIN1;
  __IEC_REAL_t XIN2;
  __IEC_REAL_t EPS;
  __IEC_BOOL_t Q;



} HYSTERESIS;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t RUN;
  __IEC_BOOL_t R1;
  __IEC_REAL_t XIN;
  __IEC_REAL_t X0;
  __IEC_TIME_t CYCLE;
  __IEC_BOOL_t Q;
  __IEC_REAL_t XOUT;



} INTEGRAL;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t AUTO;
  __IEC_REAL_t PV;
  __IEC_REAL_t SP;
  __IEC_REAL_t X0;
  __IEC_REAL_t KP;
  __IEC_REAL_t TR;
  __IEC_REAL_t TD;
  __IEC_TIME_t CYCLE;
  __IEC_REAL_t XOUT;


  __IEC_REAL_t ERROR;
  INTEGRAL ITERM;
  DERIVATIVE DTERM;

} PID;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t RUN;
  __IEC_REAL_t X0;
  __IEC_REAL_t X1;
  __IEC_TIME_t TR;
  __IEC_TIME_t CYCLE;
  __IEC_BOOL_t BUSY;
  __IEC_REAL_t XOUT;


  __IEC_REAL_t XI;
  __IEC_TIME_t T;

} RAMP;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t IN;
  __IEC_DT_t PDT;
  __IEC_BOOL_t Q;
  __IEC_DT_t CDT;


  __IEC_BOOL_t PREV_IN;
  __IEC_TIME_t OFFSET;
  __IEC_DT_t CURRENT_TIME;

} RTC;



typedef struct {

  __IEC_BOOL_t EN;
  __IEC_BOOL_t ENO;
  __IEC_BOOL_t CLAIM;
  __IEC_BOOL_t RELEASE;
  __IEC_BOOL_t BUSY;


  __IEC_BOOL_t Q_INTERNAL;

} SEMA;
# 552 "iec_std_FB.h"
static void R_TRIG_init__(R_TRIG *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CLK.value = (BOOL)0; data__->CLK.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->M.value = (BOOL)0; data__->M.flags |= 1?0x04:0;
}


static void R_TRIG_body__(R_TRIG *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CLK.value && !(data__->M.value ));
  if (!(data__-> M.flags & 0x02)) data__-> M.value = data__->CLK.value ;

  goto __end;

__end:
  return;
}





static void F_TRIG_init__(F_TRIG *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CLK.value = (BOOL)0; data__->CLK.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->M.value = (BOOL)0; data__->M.flags |= 1?0x04:0;
}


static void F_TRIG_body__(F_TRIG *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (!(data__->CLK.value ) && !(data__->M.value ));
  if (!(data__-> M.flags & 0x02)) data__-> M.value = !(data__->CLK.value );

  goto __end;

__end:
  return;
}





static void SR_init__(SR *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->S1.value = (BOOL)0; data__->S1.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->Q1.value = (BOOL)0; data__->Q1.flags |= retain?0x04:0;
}


static void SR_body__(SR *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q1.flags & 0x02)) data__-> Q1.value = (data__->S1.value || (!(data__->R.value ) && data__->Q1.value ));

  goto __end;

__end:
  return;
}





static void RS_init__(RS *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->S.value = (BOOL)0; data__->S.flags |= retain?0x04:0;
  data__->R1.value = (BOOL)0; data__->R1.flags |= retain?0x04:0;
  data__->Q1.value = (BOOL)0; data__->Q1.flags |= retain?0x04:0;
}


static void RS_body__(RS *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q1.flags & 0x02)) data__-> Q1.value = (!(data__->R1.value ) && (data__->S.value || data__->Q1.value ));

  goto __end;

__end:
  return;
}





static void CTU_init__(CTU *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTU_body__(CTU *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value >= data__->PV.value );

  goto __end;

__end:
  return;
}





static void CTU_DINT_init__(CTU_DINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTU_DINT_body__(CTU_DINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value >= data__->PV.value );

  goto __end;

__end:
  return;
}





static void CTU_LINT_init__(CTU_LINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTU_LINT_body__(CTU_LINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value >= data__->PV.value );

  goto __end;

__end:
  return;
}





static void CTU_UDINT_init__(CTU_UDINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTU_UDINT_body__(CTU_UDINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value >= data__->PV.value );

  goto __end;

__end:
  return;
}





static void CTU_ULINT_init__(CTU_ULINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTU_ULINT_body__(CTU_ULINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value >= data__->PV.value );

  goto __end;

__end:
  return;
}





static void CTD_init__(CTD *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
}


static void CTD_body__(CTD *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTD_DINT_init__(CTD_DINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
}


static void CTD_DINT_body__(CTD_DINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTD_LINT_init__(CTD_LINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
}


static void CTD_LINT_body__(CTD_LINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTD_UDINT_init__(CTD_UDINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
}


static void CTD_UDINT_body__(CTD_UDINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTD_ULINT_init__(CTD_ULINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
}


static void CTD_ULINT_body__(CTD_ULINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTUD_init__(CTUD *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->QU.value = (BOOL)0; data__->QU.flags |= retain?0x04:0;
  data__->QD.value = (BOOL)0; data__->QD.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTUD_body__(CTUD *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else {
    if (!((data__->CU_T.Q.value && data__->CD_T.Q.value ))) {
      if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
      } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
      };
    };
  };
  if (!(data__-> QU.flags & 0x02)) data__-> QU.value = (data__->CV.value >= data__->PV.value );
  if (!(data__-> QD.flags & 0x02)) data__-> QD.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTUD_DINT_init__(CTUD_DINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->QU.value = (BOOL)0; data__->QU.flags |= retain?0x04:0;
  data__->QD.value = (BOOL)0; data__->QD.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTUD_DINT_body__(CTUD_DINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else {
    if (!((data__->CU_T.Q.value && data__->CD_T.Q.value ))) {
      if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
      } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
      };
    };
  };
  if (!(data__-> QU.flags & 0x02)) data__-> QU.value = (data__->CV.value >= data__->PV.value );
  if (!(data__-> QD.flags & 0x02)) data__-> QD.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTUD_LINT_init__(CTUD_LINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->QU.value = (BOOL)0; data__->QU.flags |= retain?0x04:0;
  data__->QD.value = (BOOL)0; data__->QD.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTUD_LINT_body__(CTUD_LINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else {
    if (!((data__->CU_T.Q.value && data__->CD_T.Q.value ))) {
      if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
      } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
      };
    };
  };
  if (!(data__-> QU.flags & 0x02)) data__-> QU.value = (data__->CV.value >= data__->PV.value );
  if (!(data__-> QD.flags & 0x02)) data__-> QD.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTUD_UDINT_init__(CTUD_UDINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->QU.value = (BOOL)0; data__->QU.flags |= retain?0x04:0;
  data__->QD.value = (BOOL)0; data__->QD.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTUD_UDINT_body__(CTUD_UDINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else {
    if (!((data__->CU_T.Q.value && data__->CD_T.Q.value ))) {
      if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
      } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
      };
    };
  };
  if (!(data__-> QU.flags & 0x02)) data__-> QU.value = (data__->CV.value >= data__->PV.value );
  if (!(data__-> QD.flags & 0x02)) data__-> QD.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void CTUD_ULINT_init__(CTUD_ULINT *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CU.value = (BOOL)0; data__->CU.flags |= retain?0x04:0;
  data__->CD.value = (BOOL)0; data__->CD.flags |= retain?0x04:0;
  data__->R.value = (BOOL)0; data__->R.flags |= retain?0x04:0;
  data__->LD.value = (BOOL)0; data__->LD.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->QU.value = (BOOL)0; data__->QU.flags |= retain?0x04:0;
  data__->QD.value = (BOOL)0; data__->QD.flags |= retain?0x04:0;
  data__->CV.value = 0; data__->CV.flags |= retain?0x04:0;
  R_TRIG_init__(&data__->CD_T,retain);
  R_TRIG_init__(&data__->CU_T,retain);
}


static void CTUD_ULINT_body__(CTUD_ULINT *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__->CD_T. CLK.flags & 0x02)) data__->CD_T. CLK.value = data__->CD.value ;
  R_TRIG_body__(&data__->CD_T);
  if (!(data__->CU_T. CLK.flags & 0x02)) data__->CU_T. CLK.value = data__->CU.value ;
  R_TRIG_body__(&data__->CU_T);
  if (data__->R.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = 0;
  } else if (data__->LD.value ) {
    if (!(data__-> CV.flags & 0x02)) data__-> CV.value = data__->PV.value ;
  } else {
    if (!((data__->CU_T.Q.value && data__->CD_T.Q.value ))) {
      if ((data__->CU_T.Q.value && (data__->CV.value < data__->PV.value ))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value + 1);
      } else if ((data__->CD_T.Q.value && (data__->CV.value > 0))) {
        if (!(data__-> CV.flags & 0x02)) data__-> CV.value = (data__->CV.value - 1);
      };
    };
  };
  if (!(data__-> QU.flags & 0x02)) data__-> QU.value = (data__->CV.value >= data__->PV.value );
  if (!(data__-> QD.flags & 0x02)) data__-> QD.value = (data__->CV.value <= 0);

  goto __end;

__end:
  return;
}





static void TP_init__(TP *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->IN.value = (BOOL)0; data__->IN.flags |= retain?0x04:0;
  data__->PT.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->PT.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->ET.flags |= retain?0x04:0;
  data__->STATE.value = 0; data__->STATE.flags |= retain?0x04:0;
  data__->PREV_IN.value = (BOOL)0; data__->PREV_IN.flags |= retain?0x04:0;
  data__->CURRENT_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CURRENT_TIME.flags |= retain?0x04:0;
  data__->START_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->START_TIME.flags |= retain?0x04:0;
}


static void TP_body__(TP *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }




if (!(data__-> CURRENT_TIME.flags & 0x02)) data__-> CURRENT_TIME.value = __CURRENT_TIME


;
  if ((((data__->STATE.value == 0) && !(data__->PREV_IN.value )) && data__->IN.value )) {
    if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 1;
    if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (BOOL)1;
    if (!(data__-> START_TIME.flags & 0x02)) data__-> START_TIME.value = data__->CURRENT_TIME.value ;
  } else if ((data__->STATE.value == 1)) {
    if (LE_TIME((BOOL)1, ((void *)0), 2, __time_add(data__->START_TIME.value , data__->PT.value ), data__->CURRENT_TIME.value )) {
      if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 2;
      if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (BOOL)0;
      if (!(data__-> ET.flags & 0x02)) data__-> ET.value = data__->PT.value ;
    } else {
      if (!(data__-> ET.flags & 0x02)) data__-> ET.value = __time_sub(data__->CURRENT_TIME.value , data__->START_TIME.value );
    };
  };
  if (((data__->STATE.value == 2) && !(data__->IN.value ))) {
    if (!(data__-> ET.flags & 0x02)) data__-> ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) });
    if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 0;
  };
  if (!(data__-> PREV_IN.flags & 0x02)) data__-> PREV_IN.value = data__->IN.value ;

  goto __end;

__end:
  return;
}





static void TON_init__(TON *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->IN.value = (BOOL)0; data__->IN.flags |= retain?0x04:0;
  data__->PT.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->PT.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->ET.flags |= retain?0x04:0;
  data__->STATE.value = 0; data__->STATE.flags |= retain?0x04:0;
  data__->PREV_IN.value = (BOOL)0; data__->PREV_IN.flags |= retain?0x04:0;
  data__->CURRENT_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CURRENT_TIME.flags |= retain?0x04:0;
  data__->START_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->START_TIME.flags |= retain?0x04:0;
}


static void TON_body__(TON *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }




if (!(data__-> CURRENT_TIME.flags & 0x02)) data__-> CURRENT_TIME.value = __CURRENT_TIME


;
  if ((((data__->STATE.value == 0) && !(data__->PREV_IN.value )) && data__->IN.value )) {
    if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 1;
    if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (BOOL)0;
    if (!(data__-> START_TIME.flags & 0x02)) data__-> START_TIME.value = data__->CURRENT_TIME.value ;
  } else {
    if (!(data__->IN.value )) {
      if (!(data__-> ET.flags & 0x02)) data__-> ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) });
      if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (BOOL)0;
      if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 0;
    } else if ((data__->STATE.value == 1)) {
      if (LE_TIME((BOOL)1, ((void *)0), 2, __time_add(data__->START_TIME.value , data__->PT.value ), data__->CURRENT_TIME.value )) {
        if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 2;
        if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (BOOL)1;
        if (!(data__-> ET.flags & 0x02)) data__-> ET.value = data__->PT.value ;
      } else {
        if (!(data__-> ET.flags & 0x02)) data__-> ET.value = __time_sub(data__->CURRENT_TIME.value , data__->START_TIME.value );
      };
    };
  };
  if (!(data__-> PREV_IN.flags & 0x02)) data__-> PREV_IN.value = data__->IN.value ;

  goto __end;

__end:
  return;
}





static void TOF_init__(TOF *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->IN.value = (BOOL)0; data__->IN.flags |= retain?0x04:0;
  data__->PT.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->PT.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->ET.flags |= retain?0x04:0;
  data__->STATE.value = 0; data__->STATE.flags |= retain?0x04:0;
  data__->PREV_IN.value = (BOOL)0; data__->PREV_IN.flags |= retain?0x04:0;
  data__->CURRENT_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CURRENT_TIME.flags |= retain?0x04:0;
  data__->START_TIME.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->START_TIME.flags |= retain?0x04:0;
}


static void TOF_body__(TOF *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }




if (!(data__-> CURRENT_TIME.flags & 0x02)) data__-> CURRENT_TIME.value = __CURRENT_TIME


;
  if ((((data__->STATE.value == 0) && data__->PREV_IN.value ) && !(data__->IN.value ))) {
    if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 1;
    if (!(data__-> START_TIME.flags & 0x02)) data__-> START_TIME.value = data__->CURRENT_TIME.value ;
  } else {
    if (data__->IN.value ) {
      if (!(data__-> ET.flags & 0x02)) data__-> ET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) });
      if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 0;
    } else if ((data__->STATE.value == 1)) {
      if (LE_TIME((BOOL)1, ((void *)0), 2, __time_add(data__->START_TIME.value , data__->PT.value ), data__->CURRENT_TIME.value )) {
        if (!(data__-> STATE.flags & 0x02)) data__-> STATE.value = 2;
        if (!(data__-> ET.flags & 0x02)) data__-> ET.value = data__->PT.value ;
      } else {
        if (!(data__-> ET.flags & 0x02)) data__-> ET.value = __time_sub(data__->CURRENT_TIME.value , data__->START_TIME.value );
      };
    };
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = (data__->IN.value || (data__->STATE.value == 1));
  if (!(data__-> PREV_IN.flags & 0x02)) data__-> PREV_IN.value = data__->IN.value ;

  goto __end;

__end:
  return;
}





static void DERIVATIVE_init__(DERIVATIVE *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->RUN.value = (BOOL)0; data__->RUN.flags |= retain?0x04:0;
  data__->XIN.value = 0; data__->XIN.flags |= retain?0x04:0;
  data__->CYCLE.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CYCLE.flags |= retain?0x04:0;
  data__->XOUT.value = 0; data__->XOUT.flags |= retain?0x04:0;
  data__->X1.value = 0; data__->X1.flags |= retain?0x04:0;
  data__->X2.value = 0; data__->X2.flags |= retain?0x04:0;
  data__->X3.value = 0; data__->X3.flags |= retain?0x04:0;
}


static void DERIVATIVE_body__(DERIVATIVE *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (data__->RUN.value ) {
    if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = ((((3.0 * (data__->XIN.value - data__->X3.value )) + data__->X1.value ) - data__->X2.value ) / (10.0 * TIME_TO_REAL((BOOL)(BOOL)1, ((void *)0), (TIME)data__->CYCLE.value )))

                                         ;
    if (!(data__-> X3.flags & 0x02)) data__-> X3.value = data__->X2.value ;
    if (!(data__-> X2.flags & 0x02)) data__-> X2.value = data__->X1.value ;
    if (!(data__-> X1.flags & 0x02)) data__-> X1.value = data__->XIN.value ;
  } else {
    if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = 0.0;
    if (!(data__-> X1.flags & 0x02)) data__-> X1.value = data__->XIN.value ;
    if (!(data__-> X2.flags & 0x02)) data__-> X2.value = data__->XIN.value ;
    if (!(data__-> X3.flags & 0x02)) data__-> X3.value = data__->XIN.value ;
  };

  goto __end;

__end:
  return;
}





static void HYSTERESIS_init__(HYSTERESIS *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->XIN1.value = 0; data__->XIN1.flags |= retain?0x04:0;
  data__->XIN2.value = 0; data__->XIN2.flags |= retain?0x04:0;
  data__->EPS.value = 0; data__->EPS.flags |= retain?0x04:0;
  data__->Q.value = 0; data__->Q.flags |= retain?0x04:0;
}


static void HYSTERESIS_body__(HYSTERESIS *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (data__->Q.value ) {
    if ((data__->XIN1.value < (data__->XIN2.value - data__->EPS.value ))) {
      if (!(data__-> Q.flags & 0x02)) data__-> Q.value = 0;
    };
  } else if ((data__->XIN1.value > (data__->XIN2.value + data__->EPS.value ))) {
    if (!(data__-> Q.flags & 0x02)) data__-> Q.value = 1;
  };

  goto __end;

__end:
  return;
}





static void INTEGRAL_init__(INTEGRAL *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->RUN.value = (BOOL)0; data__->RUN.flags |= retain?0x04:0;
  data__->R1.value = (BOOL)0; data__->R1.flags |= retain?0x04:0;
  data__->XIN.value = 0; data__->XIN.flags |= retain?0x04:0;
  data__->X0.value = 0; data__->X0.flags |= retain?0x04:0;
  data__->CYCLE.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CYCLE.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->XOUT.value = 0; data__->XOUT.flags |= retain?0x04:0;
}


static void INTEGRAL_body__(INTEGRAL *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = !(data__->R1.value );
  if (data__->R1.value ) {
    if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = data__->X0.value ;
  } else if (data__->RUN.value ) {
    if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = (data__->XOUT.value + (data__->XIN.value * TIME_TO_REAL((BOOL)(BOOL)1, ((void *)0), (TIME)data__->CYCLE.value )))

                                         ;
  };

  goto __end;

__end:
  return;
}





static void PID_init__(PID *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->AUTO.value = (BOOL)0; data__->AUTO.flags |= retain?0x04:0;
  data__->PV.value = 0; data__->PV.flags |= retain?0x04:0;
  data__->SP.value = 0; data__->SP.flags |= retain?0x04:0;
  data__->X0.value = 0; data__->X0.flags |= retain?0x04:0;
  data__->KP.value = 0; data__->KP.flags |= retain?0x04:0;
  data__->TR.value = 0; data__->TR.flags |= retain?0x04:0;
  data__->TD.value = 0; data__->TD.flags |= retain?0x04:0;
  data__->CYCLE.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CYCLE.flags |= retain?0x04:0;
  data__->XOUT.value = 0; data__->XOUT.flags |= retain?0x04:0;
  data__->ERROR.value = 0; data__->ERROR.flags |= retain?0x04:0;
  INTEGRAL_init__(&data__->ITERM,retain);
  DERIVATIVE_init__(&data__->DTERM,retain);
}


static void PID_body__(PID *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> ERROR.flags & 0x02)) data__-> ERROR.value = (data__->PV.value - data__->SP.value );
  if (!(data__->ITERM. RUN.flags & 0x02)) data__->ITERM. RUN.value = data__->AUTO.value ;
  if (!(data__->ITERM. R1.flags & 0x02)) data__->ITERM. R1.value = !(data__->AUTO.value );
  if (!(data__->ITERM. XIN.flags & 0x02)) data__->ITERM. XIN.value = data__->ERROR.value ;
  if (!(data__->ITERM. X0.flags & 0x02)) data__->ITERM. X0.value = (data__->TR.value * (data__->X0.value - data__->ERROR.value ));
  if (!(data__->ITERM. CYCLE.flags & 0x02)) data__->ITERM. CYCLE.value = data__->CYCLE.value ;
  INTEGRAL_body__(&data__->ITERM);
  if (!(data__->DTERM. RUN.flags & 0x02)) data__->DTERM. RUN.value = data__->AUTO.value ;
  if (!(data__->DTERM. XIN.flags & 0x02)) data__->DTERM. XIN.value = data__->ERROR.value ;
  if (!(data__->DTERM. CYCLE.flags & 0x02)) data__->DTERM. CYCLE.value = data__->CYCLE.value ;
  DERIVATIVE_body__(&data__->DTERM);
  if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = (data__->KP.value * ((data__->ERROR.value + (data__->ITERM.XOUT.value / data__->TR.value )) + (data__->DTERM.XOUT.value * data__->TD.value )));

  goto __end;

__end:
  return;
}





static void RAMP_init__(RAMP *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->RUN.value = (BOOL)0; data__->RUN.flags |= retain?0x04:0;
  data__->X0.value = 0; data__->X0.flags |= retain?0x04:0;
  data__->X1.value = 0; data__->X1.flags |= retain?0x04:0;
  data__->TR.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->TR.flags |= retain?0x04:0;
  data__->CYCLE.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->CYCLE.flags |= retain?0x04:0;
  data__->BUSY.value = (BOOL)0; data__->BUSY.flags |= retain?0x04:0;
  data__->XOUT.value = 0.0; data__->XOUT.flags |= retain?0x04:0;
  data__->XI.value = 0; data__->XI.flags |= retain?0x04:0;
  data__->T.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->T.flags |= retain?0x04:0;
}


static void RAMP_body__(RAMP *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> BUSY.flags & 0x02)) data__-> BUSY.value = data__->RUN.value ;
  if (data__->RUN.value ) {
    if (GE_TIME((BOOL)1, ((void *)0), 2, data__->T.value , data__->TR.value )) {
      if (!(data__-> BUSY.flags & 0x02)) data__-> BUSY.value = 0;
      if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = data__->X1.value ;
    } else {
      if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = (data__->XI.value + (((data__->X1.value - data__->XI.value ) * TIME_TO_REAL((BOOL)(BOOL)1, ((void *)0), (TIME)data__->T.value )) / TIME_TO_REAL((BOOL)(BOOL)1, ((void *)0), (TIME)data__->TR.value )))



                                        ;
      if (!(data__-> T.flags & 0x02)) data__-> T.value = __time_add(data__->T.value , data__->CYCLE.value );
    };
  } else {
    if (!(data__-> XOUT.flags & 0x02)) data__-> XOUT.value = data__->X0.value ;
    if (!(data__-> XI.flags & 0x02)) data__-> XI.value = data__->X0.value ;
    if (!(data__-> T.flags & 0x02)) data__-> T.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) });
  };

  goto __end;

__end:
  return;
}





static void RTC_init__(RTC *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->IN.value = (BOOL)0; data__->IN.flags |= retain?0x04:0;
  data__->PDT.value = __dt_to_timespec(0, 0, 0, 1, 1, 1970); data__->PDT.flags |= retain?0x04:0;
  data__->Q.value = (BOOL)0; data__->Q.flags |= retain?0x04:0;
  data__->CDT.value = __dt_to_timespec(0, 0, 0, 1, 1, 1970); data__->CDT.flags |= retain?0x04:0;
  data__->PREV_IN.value = (BOOL)0; data__->PREV_IN.flags |= retain?0x04:0;
  data__->OFFSET.value = ((IEC_TIMESPEC){ ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))), ((long int)(( ((long double)(((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) - ((long int) (((1>=0)?1:-1)*((((long double)0*24 + (long double)0)*60 + (long double)0)*60 + (long double)0 + (long double)0/1e3))) )*1e9)) }); data__->OFFSET.flags |= retain?0x04:0;
  data__->CURRENT_TIME.value = __dt_to_timespec(0, 0, 0, 1, 1, 1970); data__->CURRENT_TIME.flags |= retain?0x04:0;
}


static void RTC_body__(RTC *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }




if (!(data__-> CURRENT_TIME.flags & 0x02)) data__-> CURRENT_TIME.value = __CURRENT_TIME


;
  if (data__->IN.value ) {
    if (!(data__->PREV_IN.value )) {
      if (!(data__-> OFFSET.flags & 0x02)) data__-> OFFSET.value = __time_sub(data__->PDT.value , data__->CURRENT_TIME.value );
    };
    if (!(data__-> CDT.flags & 0x02)) data__-> CDT.value = __time_add(data__->CURRENT_TIME.value , data__->OFFSET.value );
  } else {
    if (!(data__-> CDT.flags & 0x02)) data__-> CDT.value = data__->CURRENT_TIME.value ;
  };
  if (!(data__-> Q.flags & 0x02)) data__-> Q.value = data__->IN.value ;
  if (!(data__-> PREV_IN.flags & 0x02)) data__-> PREV_IN.value = data__->IN.value ;

  goto __end;

__end:
  return;
}





static void SEMA_init__(SEMA *data__, BOOL retain) {
  data__->EN.value = (BOOL)1; data__->EN.flags |= retain?0x04:0;
  data__->ENO.value = (BOOL)1; data__->ENO.flags |= retain?0x04:0;
  data__->CLAIM.value = (BOOL)0; data__->CLAIM.flags |= retain?0x04:0;
  data__->RELEASE.value = (BOOL)0; data__->RELEASE.flags |= retain?0x04:0;
  data__->BUSY.value = (BOOL)0; data__->BUSY.flags |= retain?0x04:0;
  data__->Q_INTERNAL.value = (BOOL)0; data__->Q_INTERNAL.flags |= retain?0x04:0;
}


static void SEMA_body__(SEMA *data__) {

  if (!data__->EN.value ) {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)0;
    return;
  }
  else {
    if (!(data__-> ENO.flags & 0x02)) data__-> ENO.value = (BOOL)1;
  }


  if (!(data__-> Q_INTERNAL.flags & 0x02)) data__-> Q_INTERNAL.value = (data__->CLAIM.value || (data__->Q_INTERNAL.value && !(data__->RELEASE.value )));
  if (!(data__-> BUSY.flags & 0x02)) data__-> BUSY.value = data__->Q_INTERNAL.value ;

  goto __end;

__end:
  return;
}
# 741 "iec_std_lib.h" 2
